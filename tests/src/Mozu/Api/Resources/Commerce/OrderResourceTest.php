<?php

namespace Mozu\Api\Resource\Commerce;

require_once __DIR__ . '/../../../../BaseTest.php';

use Mozu\Tests\BaseTest;
use Mozu\Api\ApiContext;
use Mozu\Api\DataViewMode;
use Mozu\Api\Resources\Commerce\OrderResource;
use Mozu\Api\ApiException;

/**
 * Test class for DocumentResource.
 * Generated by PHPUnit on 2013-12-05 at 12:22:34.
 */
class OrderResourceTest extends BaseTest
{
	/**
	 * @var DocumentResource
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		
		$apiContext = new ApiContext($this->tenantId);
		$this->object = new OrderResource($apiContext);

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	 
	/**
	 * @covers Mozu\Api\Resources\Content\Documentlists\DocumentResource::getDocumentContent
	 * @todo Implement testGetDocumentContent().
	 */
	public function testGetOrdersByFilter()
	{
        try {
            $filters = urlencode("Status+eq+Accepted");
            $orders = $this->object->getOrders($filters);
            $this->assertNotEmpty($orders);
            $filters = urlencode("submittedDate+gt+2013-12-15T12:21:24z");
            $orders = $this->object->getOrders('0',100, null,$filters, null, null);
            $this->assertNotEmpty($orders);
        } catch(ApiException $exc) {
            $this->fail($exc->getMessage());
        }

	}

	
	public function testGetOrderByNumberFail() {
		try{
			$order = $this->object->getOrder("2",false);
		} catch(ApiException $ex) {
			$this->assertNotEmpty($ex->getMessage());
			$this->assertNotEmpty($ex->getCorrelationId());
			
		}
	}
	
	public function testGetOrderByIdFail() {
        try{
            $order = $this->object->getOrder("03cf384c4fdce0aee42bc16800001e7c", true);
        } catch(ApiException $ex) {
            $this->assertNotEmpty($ex->getMessage());
            $this->assertContains("Item not found",$ex->getMessage());
        }

	}

}
?>