<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Content\Documentlists;

use Mozu\Api\Clients\Content\Documentlists\DocumentTreeClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Headers;

/**
* Use the document tree subresource to retrieve documents and manage content within the document hierarchy.
*/
class DocumentTreeResource {

		private $apiContext;
		private $dataViewMode;
		public function __construct(ApiContext $apiContext, $dataViewMode) 
	{
		$this->apiContext = $apiContext;
		$this->dataViewMode = $dataViewMode;
	}
	



	/**
	* 
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function getTreeDocumentContent($documentListName, $documentName)
	{
		$mozuClient = DocumentTreeClient::getTreeDocumentContentClient($this->dataViewMode, $documentListName, $documentName);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getTreeDocumentContentAsync($documentListName, $documentName)
	{
		$mozuClient = DocumentTreeClient::getTreeDocumentContentClient($this->dataViewMode, $documentListName, $documentName);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $crop 
	* @param string $documentListName 
	* @param string $documentName 
	* @param int $height 
	* @param int $max 
	* @param int $maxHeight 
	* @param int $maxWidth 
	* @param int $quality 
	* @param int $width 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function transformTreeDocumentContent($documentListName, $documentName, $width =  null, $height =  null, $max =  null, $maxWidth =  null, $maxHeight =  null, $crop =  null, $quality =  null)
	{
		$mozuClient = DocumentTreeClient::transformTreeDocumentContentClient($documentListName, $documentName, $width, $height, $max, $maxWidth, $maxHeight, $crop, $quality);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $crop 
	* @param string $documentListName 
	* @param string $documentName 
	* @param int $height 
	* @param int $max 
	* @param int $maxHeight 
	* @param int $maxWidth 
	* @param int $quality 
	* @param int $width 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function transformTreeDocumentContentAsync($documentListName, $documentName, $width =  null, $height =  null, $max =  null, $maxWidth =  null, $maxHeight =  null, $crop =  null, $quality =  null)
	{
		$mozuClient = DocumentTreeClient::transformTreeDocumentContentClient($documentListName, $documentName, $width, $height, $max, $maxWidth, $maxHeight, $crop, $quality);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @param bool $includeInactive 
	* @param string $responseFields 
	* @return Document 
	* @deprecated deprecated since version 1.17
	*/
	public function getTreeDocument($documentListName, $documentName, $includeInactive =  null, $responseFields =  null)
	{
		$mozuClient = DocumentTreeClient::getTreeDocumentClient($this->dataViewMode, $documentListName, $documentName, $includeInactive, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @param bool $includeInactive 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getTreeDocumentAsync($documentListName, $documentName, $includeInactive =  null, $responseFields =  null)
	{
		$mozuClient = DocumentTreeClient::getTreeDocumentClient($this->dataViewMode, $documentListName, $documentName, $includeInactive, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @param Stream $stream Input output stream that delivers information.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function updateTreeDocumentContent($stream, $documentListName, $documentName, $contentType= null)
	{
		$mozuClient = DocumentTreeClient::updateTreeDocumentContentClient($stream, $documentListName, $documentName, $contentType);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateTreeDocumentContentAsync($stream, $documentListName, $documentName, $contentType= null)
	{
		$mozuClient = DocumentTreeClient::updateTreeDocumentContentClient($stream, $documentListName, $documentName, $contentType);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @param Stream $stream Input output stream that delivers information.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteTreeDocumentContent($stream, $documentListName, $documentName, $contentType= null)
	{
		$mozuClient = DocumentTreeClient::deleteTreeDocumentContentClient($stream, $documentListName, $documentName, $contentType);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $documentListName The name of the document list associated with the document.
	* @param string $documentName The name of the document, which is unique within its folder.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteTreeDocumentContentAsync($stream, $documentListName, $documentName, $contentType= null)
	{
		$mozuClient = DocumentTreeClient::deleteTreeDocumentContentClient($stream, $documentListName, $documentName, $contentType);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

