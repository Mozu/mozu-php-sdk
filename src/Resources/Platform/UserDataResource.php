<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Platform;

use Mozu\Api\Clients\Platform\UserDataClient;
use Mozu\Api\ApiContext;


/**
* Use the user data subresource to store user-level data required for a third-party application in the Mozu database.
*/
class UserDataResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $dbEntryQuery The database entry query string used to retrieve the record information.
	* @param string $responseFields 
	* @return string 
	* @deprecated deprecated since version 1.17
	*/
	public function getDBValue($dbEntryQuery, $responseFields =  null)
	{
		$mozuClient = UserDataClient::getDBValueClient($dbEntryQuery, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $dbEntryQuery The database entry query string used to retrieve the record information.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getDBValueAsync($dbEntryQuery, $responseFields =  null)
	{
		$mozuClient = UserDataClient::getDBValueClient($dbEntryQuery, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $dbEntryQuery The database entry string to create.
	* @param string $value The value string to create.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function createDBValue($value, $dbEntryQuery)
	{
		$mozuClient = UserDataClient::createDBValueClient($value, $dbEntryQuery);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $dbEntryQuery The database entry string to create.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createDBValueAsync($value, $dbEntryQuery)
	{
		$mozuClient = UserDataClient::createDBValueClient($value, $dbEntryQuery);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $dbEntryQuery The database entry query string used to update the record information.
	* @param string $value The database value to update.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function updateDBValue($value, $dbEntryQuery)
	{
		$mozuClient = UserDataClient::updateDBValueClient($value, $dbEntryQuery);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $dbEntryQuery The database entry query string used to update the record information.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateDBValueAsync($value, $dbEntryQuery)
	{
		$mozuClient = UserDataClient::updateDBValueClient($value, $dbEntryQuery);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $dbEntryQuery The database entry string to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteDBValue($dbEntryQuery)
	{
		$mozuClient = UserDataClient::deleteDBValueClient($dbEntryQuery);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $dbEntryQuery The database entry string to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteDBValueAsync($dbEntryQuery)
	{
		$mozuClient = UserDataClient::deleteDBValueClient($dbEntryQuery);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

