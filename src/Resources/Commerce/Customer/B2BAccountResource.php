<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer;

use Mozu\Api\Clients\Commerce\Customer\B2BAccountClient;
use Mozu\Api\ApiContext;


/**
* 
*/
class B2BAccountResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $fields 
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return B2BAccountCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getB2BAccounts($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $fields =  null, $q =  null, $qLimit =  null, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getB2BAccountsClient($startIndex, $pageSize, $sortBy, $filter, $fields, $q, $qLimit, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $fields 
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getB2BAccountsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $fields =  null, $q =  null, $qLimit =  null, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getB2BAccountsClient($startIndex, $pageSize, $sortBy, $filter, $fields, $q, $qLimit, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $attributeFQN 
	* @param string $responseFields 
	* @return CustomerAttribute 
	* @deprecated deprecated since version 1.17
	*/
	public function getB2BAccountAttribute($accountId, $attributeFQN, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getB2BAccountAttributeClient($accountId, $attributeFQN, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $attributeFQN 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getB2BAccountAttributeAsync($accountId, $attributeFQN, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getB2BAccountAttributeClient($accountId, $attributeFQN, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CustomerAttributeCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getB2BAccountAttributes($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getB2BAccountAttributesClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getB2BAccountAttributesAsync($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getB2BAccountAttributesClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @param string $userId 
	* @return UserRoleCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getUserRolesAsync($accountId, $userId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getUserRolesAsyncClient($accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getUserRolesAsyncAsync($accountId, $userId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getUserRolesAsyncClient($accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return B2BUserCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getUsers($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getUsersClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getUsersAsync($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getUsersClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @return B2BAccount 
	* @deprecated deprecated since version 1.17
	*/
	public function getB2BAccount($accountId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getB2BAccountClient($accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getB2BAccountAsync($accountId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::getB2BAccountClient($accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param B2BAccount $account 
	* @return B2BAccount 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccount($account, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::addAccountClient($account, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountAsync($account, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::addAccountClient($account, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @param CustomerAttribute $attribute 
	* @return CustomerAttribute 
	* @deprecated deprecated since version 1.17
	*/
	public function addB2BAccountAttribute($attribute, $accountId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::addB2BAccountAttributeClient($attribute, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addB2BAccountAttributeAsync($attribute, $accountId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::addB2BAccountAttributeClient($attribute, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param int $roleId 
	* @param string $userId 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function addUserRoleAsync($accountId, $userId, $roleId)
	{
		$mozuClient = B2BAccountClient::addUserRoleAsyncClient($accountId, $userId, $roleId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param int $roleId 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addUserRoleAsyncAsync($accountId, $userId, $roleId)
	{
		$mozuClient = B2BAccountClient::addUserRoleAsyncClient($accountId, $userId, $roleId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @param B2BUserAndAuthInfo $user 
	* @return B2BUser 
	* @deprecated deprecated since version 1.17
	*/
	public function addUser($user, $accountId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::addUserClient($user, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addUserAsync($user, $accountId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::addUserClient($user, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $attributeFQN 
	* @param string $responseFields 
	* @param CustomerAttribute $attribute 
	* @return CustomerAttribute 
	* @deprecated deprecated since version 1.17
	*/
	public function updateB2BAccountAttribute($attribute, $accountId, $attributeFQN, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::updateB2BAccountAttributeClient($attribute, $accountId, $attributeFQN, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $attributeFQN 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateB2BAccountAttributeAsync($attribute, $accountId, $attributeFQN, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::updateB2BAccountAttributeClient($attribute, $accountId, $attributeFQN, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $userId 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function removeUser($accountId, $userId)
	{
		$mozuClient = B2BAccountClient::removeUserClient($accountId, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function removeUserAsync($accountId, $userId)
	{
		$mozuClient = B2BAccountClient::removeUserClient($accountId, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @param string $userId 
	* @param B2BUser $user 
	* @return B2BUser 
	* @deprecated deprecated since version 1.17
	*/
	public function updateUser($user, $accountId, $userId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::updateUserClient($user, $accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateUserAsync($user, $accountId, $userId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::updateUserClient($user, $accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @param B2BAccount $account 
	* @return B2BAccount 
	* @deprecated deprecated since version 1.17
	*/
	public function updateAccount($account, $accountId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::updateAccountClient($account, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateAccountAsync($account, $accountId, $responseFields =  null)
	{
		$mozuClient = B2BAccountClient::updateAccountClient($account, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $attributeFQN 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteB2BAccountAttribute($accountId, $attributeFQN)
	{
		$mozuClient = B2BAccountClient::deleteB2BAccountAttributeClient($accountId, $attributeFQN);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $attributeFQN 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteB2BAccountAttributeAsync($accountId, $attributeFQN)
	{
		$mozuClient = B2BAccountClient::deleteB2BAccountAttributeClient($accountId, $attributeFQN);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param int $roleId 
	* @param string $userId 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function removeUserRoleAsync($accountId, $userId, $roleId)
	{
		$mozuClient = B2BAccountClient::removeUserRoleAsyncClient($accountId, $userId, $roleId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param int $roleId 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function removeUserRoleAsyncAsync($accountId, $userId, $roleId)
	{
		$mozuClient = B2BAccountClient::removeUserRoleAsyncClient($accountId, $userId, $roleId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

