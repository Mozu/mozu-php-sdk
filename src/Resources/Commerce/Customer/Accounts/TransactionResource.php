<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer\Accounts;

use Mozu\Api\Clients\Commerce\Customer\Accounts\TransactionClient;
use Mozu\Api\ApiContext;


/**
* Use the Customer Account Transactions resource to manage the transactions associated with a customer account.
*/
class TransactionResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account for which to retrieve transactions.
	* @return array|Transaction 
	* @deprecated deprecated since version 1.17
	*/
	public function getTransactions($accountId)
	{
		$mozuClient = TransactionClient::getTransactionsClient($accountId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account for which to retrieve transactions.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getTransactionsAsync($accountId)
	{
		$mozuClient = TransactionClient::getTransactionsClient($accountId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param Transaction $transaction Properties of the transaction to create for the customer account.
	* @return Transaction 
	* @deprecated deprecated since version 1.17
	*/
	public function addTransaction($transaction, $accountId, $responseFields =  null)
	{
		$mozuClient = TransactionClient::addTransactionClient($transaction, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addTransactionAsync($transaction, $accountId, $responseFields =  null)
	{
		$mozuClient = TransactionClient::addTransactionClient($transaction, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account from which to delete the transaction.
	* @param string $transactionId Unique identifier of the transaction to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function removeTransaction($accountId, $transactionId)
	{
		$mozuClient = TransactionClient::removeTransactionClient($accountId, $transactionId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account from which to delete the transaction.
	* @param string $transactionId Unique identifier of the transaction to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function removeTransactionAsync($accountId, $transactionId)
	{
		$mozuClient = TransactionClient::removeTransactionClient($accountId, $transactionId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

