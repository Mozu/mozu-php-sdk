<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer\Accounts;

use Mozu\Api\Clients\Commerce\Customer\Accounts\CardClient;
use Mozu\Api\ApiContext;


/**
* Use the Cards subresource to manage stored credit cards for customer accounts. Mozu stores limited card data in the Customer service for expedited ordering purposes; however, the complete card data is stored in the Payment service.
*/
class CardResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $cardId Unique identifier of the card associated with the customer account billing contact.
	* @param string $responseFields 
	* @return Card 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountCard($accountId, $cardId, $responseFields =  null)
	{
		$mozuClient = CardClient::getAccountCardClient($accountId, $cardId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $cardId Unique identifier of the card associated with the customer account billing contact.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountCardAsync($accountId, $cardId, $responseFields =  null)
	{
		$mozuClient = CardClient::getAccountCardClient($accountId, $cardId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @return CardCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountCards($accountId, $responseFields =  null)
	{
		$mozuClient = CardClient::getAccountCardsClient($accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountCardsAsync($accountId, $responseFields =  null)
	{
		$mozuClient = CardClient::getAccountCardsClient($accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param Card $card Properties of the customer credit card to add to the account.
	* @return Card 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccountCard($card, $accountId, $responseFields =  null)
	{
		$mozuClient = CardClient::addAccountCardClient($card, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountCardAsync($card, $accountId, $responseFields =  null)
	{
		$mozuClient = CardClient::addAccountCardClient($card, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $cardId Unique identifier of the credit card.
	* @param string $responseFields 
	* @param Card $card Properties of the customer account credit card to update.
	* @return Card 
	* @deprecated deprecated since version 1.17
	*/
	public function updateAccountCard($card, $accountId, $cardId, $responseFields =  null)
	{
		$mozuClient = CardClient::updateAccountCardClient($card, $accountId, $cardId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $cardId Unique identifier of the credit card.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateAccountCardAsync($card, $accountId, $cardId, $responseFields =  null)
	{
		$mozuClient = CardClient::updateAccountCardClient($card, $accountId, $cardId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $cardId Unique identifier of the credit card to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteAccountCard($accountId, $cardId)
	{
		$mozuClient = CardClient::deleteAccountCardClient($accountId, $cardId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $cardId Unique identifier of the credit card to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteAccountCardAsync($accountId, $cardId)
	{
		$mozuClient = CardClient::deleteAccountCardClient($accountId, $cardId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

