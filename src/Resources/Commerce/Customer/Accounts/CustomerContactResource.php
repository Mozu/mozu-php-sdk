<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer\Accounts;

use Mozu\Api\Clients\Commerce\Customer\Accounts\CustomerContactClient;
use Mozu\Api\ApiContext;


/**
* Merchants and customers can create, view, update, and delete a contact for a customer account. A customer account may have multiple contacts for billing and shipping addresses.
*/
class CustomerContactResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account whose contact information is being retrieved.
	* @param int $contactId Unique identifier of the customer account contact to retrieve.
	* @param string $responseFields 
	* @param string $userId 
	* @return CustomerContact 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountContact($accountId, $contactId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactClient($accountId, $contactId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account whose contact information is being retrieved.
	* @param int $contactId Unique identifier of the customer account contact to retrieve.
	* @param string $responseFields 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountContactAsync($accountId, $contactId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactClient($accountId, $contactId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account associated with the contact information to retrieve.
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @param string $userId 
	* @return CustomerContactCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountContacts($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactsClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account associated with the contact information to retrieve.
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountContactsAsync($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactsClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account containing the new contact.
	* @param string $responseFields 
	* @param CustomerContact $contact Properties of the new contact. Required properties: Contact.Email, ContactType.
	* @return CustomerContact 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccountContact($contact, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::addAccountContactClient($contact, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account containing the new contact.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountContactAsync($contact, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::addAccountContactClient($contact, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account whose contact information is being updated.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @param string $responseFields 
	* @param string $userId 
	* @param CustomerContact $contact All properties the updated contact will have. Required properties: Name and email address.
	* @return CustomerContact 
	* @deprecated deprecated since version 1.17
	*/
	public function updateAccountContact($contact, $accountId, $contactId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::updateAccountContactClient($contact, $accountId, $contactId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account whose contact information is being updated.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @param string $responseFields 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateAccountContactAsync($contact, $accountId, $contactId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::updateAccountContactClient($contact, $accountId, $contactId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @param array|CustomerContact $contactList 
	* @return CustomerContactCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccountContactList($contactList, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::addAccountContactListClient($contactList, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountContactListAsync($contactList, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::addAccountContactListClient($contactList, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifier of the customer account contact to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteAccountContact($accountId, $contactId)
	{
		$mozuClient = CustomerContactClient::deleteAccountContactClient($accountId, $contactId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifier of the customer account contact to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteAccountContactAsync($accountId, $contactId)
	{
		$mozuClient = CustomerContactClient::deleteAccountContactClient($accountId, $contactId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

