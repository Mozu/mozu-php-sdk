<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer\Accounts;

use Mozu\Api\Clients\Commerce\Customer\Accounts\CustomerAttributeClient;
use Mozu\Api\ApiContext;


/**
* Use the Attributes subresource to manage the attributes used to uniquely identify shopper accounts, such as gender or age.
*/
class CustomerAttributeResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param int $accountId Identifier of the customer account associated with the attribute to retrieve.
	* @param string $attributeFQN 
	* @param string $responseFields 
	* @param string $userId 
	* @return CustomerAttribute 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountAttribute($accountId, $attributeFQN, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAttributeClient::getAccountAttributeClient($accountId, $attributeFQN, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Identifier of the customer account associated with the attribute to retrieve.
	* @param string $attributeFQN 
	* @param string $responseFields 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountAttributeAsync($accountId, $attributeFQN, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAttributeClient::getAccountAttributeClient($accountId, $attributeFQN, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Identifier of the customer account associated with the attributes to retrieve.
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @param string $userId 
	* @return CustomerAttributeCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountAttributes($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAttributeClient::getAccountAttributesClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Identifier of the customer account associated with the attributes to retrieve.
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountAttributesAsync($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAttributeClient::getAccountAttributesClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param string $userId 
	* @param CustomerAttribute $attribute The attribute to add to the customer account.
	* @return CustomerAttribute 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccountAttribute($attribute, $accountId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAttributeClient::addAccountAttributeClient($attribute, $accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountAttributeAsync($attribute, $accountId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAttributeClient::addAccountAttributeClient($attribute, $accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Identifier of the customer account associated with the attribute.
	* @param string $attributeFQN 
	* @param string $responseFields 
	* @param string $userId 
	* @param CustomerAttribute $attribute Properties of the customer account attribute to update.
	* @return CustomerAttribute 
	* @deprecated deprecated since version 1.17
	*/
	public function updateAccountAttribute($attribute, $accountId, $attributeFQN, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAttributeClient::updateAccountAttributeClient($attribute, $accountId, $attributeFQN, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Identifier of the customer account associated with the attribute.
	* @param string $attributeFQN 
	* @param string $responseFields 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateAccountAttributeAsync($attribute, $accountId, $attributeFQN, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAttributeClient::updateAccountAttributeClient($attribute, $accountId, $attributeFQN, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $attributeFQN 
	* @param string $userId 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteAccountAttribute($accountId, $attributeFQN, $userId =  null)
	{
		$mozuClient = CustomerAttributeClient::deleteAccountAttributeClient($accountId, $attributeFQN, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $attributeFQN 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteAccountAttributeAsync($accountId, $attributeFQN, $userId =  null)
	{
		$mozuClient = CustomerAttributeClient::deleteAccountAttributeClient($accountId, $attributeFQN, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

