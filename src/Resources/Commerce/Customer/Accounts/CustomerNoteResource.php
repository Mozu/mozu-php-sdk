<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer\Accounts;

use Mozu\Api\Clients\Commerce\Customer\Accounts\CustomerNoteClient;
use Mozu\Api\ApiContext;


/**
* Tenant administrators can add and view internal notes for a customer account. For example, a client can track a shopper's interests or complaints. Only clients can add and view notes. Shoppers cannot view these notes from the My Account page.
*/
class CustomerNoteResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account that contains the note being retrieved.
	* @param int $noteId Unique identifier of a particular note to retrieve.
	* @param string $responseFields 
	* @return CustomerNote 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountNote($accountId, $noteId, $responseFields =  null)
	{
		$mozuClient = CustomerNoteClient::getAccountNoteClient($accountId, $noteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account that contains the note being retrieved.
	* @param int $noteId Unique identifier of a particular note to retrieve.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountNoteAsync($accountId, $noteId, $responseFields =  null)
	{
		$mozuClient = CustomerNoteClient::getAccountNoteClient($accountId, $noteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CustomerNoteCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccountNotes($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = CustomerNoteClient::getAccountNotesClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountNotesAsync($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = CustomerNoteClient::getAccountNotesClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account for which to create the note.
	* @param string $responseFields 
	* @param CustomerNote $note Properties of the customer account note to create.
	* @return CustomerNote 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccountNote($note, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerNoteClient::addAccountNoteClient($note, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account for which to create the note.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountNoteAsync($note, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerNoteClient::addAccountNoteClient($note, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account note to modify.
	* @param int $noteId Unique identifier of the note to update.
	* @param string $responseFields 
	* @param CustomerNote $note The new content to replace the existing note.
	* @return CustomerNote 
	* @deprecated deprecated since version 1.17
	*/
	public function updateAccountNote($note, $accountId, $noteId, $responseFields =  null)
	{
		$mozuClient = CustomerNoteClient::updateAccountNoteClient($note, $accountId, $noteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account note to modify.
	* @param int $noteId Unique identifier of the note to update.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateAccountNoteAsync($note, $accountId, $noteId, $responseFields =  null)
	{
		$mozuClient = CustomerNoteClient::updateAccountNoteClient($note, $accountId, $noteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account that contains the note being deleted.
	* @param int $noteId Unique identifier of the customer account note being deleted.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteAccountNote($accountId, $noteId)
	{
		$mozuClient = CustomerNoteClient::deleteAccountNoteClient($accountId, $noteId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account that contains the note being deleted.
	* @param int $noteId Unique identifier of the customer account note being deleted.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteAccountNoteAsync($accountId, $noteId)
	{
		$mozuClient = CustomerNoteClient::deleteAccountNoteClient($accountId, $noteId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

