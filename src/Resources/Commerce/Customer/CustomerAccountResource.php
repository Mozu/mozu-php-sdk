<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer;

use Mozu\Api\Clients\Commerce\Customer\CustomerAccountClient;
use Mozu\Api\ApiContext;


/**
* Use the Customer Accounts resource to manage the components of shopper accounts, including attributes, contact information, company notes, and groups associated with the customer account.
*/
class CustomerAccountResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $fields The fields to include in the response.
	* @param string $filter 
	* @param bool $isAnonymous If true, retrieve anonymous shopper accounts in the response.
	* @param int $pageSize 
	* @param string $q A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CustomerAccountCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccounts($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $fields =  null, $q =  null, $qLimit =  null, $isAnonymous =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getAccountsClient($startIndex, $pageSize, $sortBy, $filter, $fields, $q, $qLimit, $isAnonymous, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $fields The fields to include in the response.
	* @param string $filter 
	* @param bool $isAnonymous If true, retrieve anonymous shopper accounts in the response.
	* @param int $pageSize 
	* @param string $q A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $fields =  null, $q =  null, $qLimit =  null, $isAnonymous =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getAccountsClient($startIndex, $pageSize, $sortBy, $filter, $fields, $q, $qLimit, $isAnonymous, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param string $userId 
	* @return LoginState 
	* @deprecated deprecated since version 1.17
	*/
	public function getLoginState($accountId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateClient($accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLoginStateAsync($accountId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateClient($accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account to retrieve.
	* @param string $responseFields 
	* @param string $userId 
	* @return CustomerAccount 
	* @deprecated deprecated since version 1.17
	*/
	public function getAccount($accountId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getAccountClient($accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account to retrieve.
	* @param string $responseFields 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAccountAsync($accountId, $userId =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getAccountClient($accountId, $userId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return CustomerAccount 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccount($account, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addAccountClient($account, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountAsync($account, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addAccountClient($account, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId The customer account information required to change the userpassword.
	* @param bool $unlockAccount 
	* @param string $userId 
	* @param PasswordInfo $passwordInfo The password information required to change the user password.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function changePassword($passwordInfo, $accountId, $unlockAccount =  null, $userId =  null)
	{
		$mozuClient = CustomerAccountClient::changePasswordClient($passwordInfo, $accountId, $unlockAccount, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId The customer account information required to change the userpassword.
	* @param bool $unlockAccount 
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function changePasswordAsync($passwordInfo, $accountId, $unlockAccount =  null, $userId =  null)
	{
		$mozuClient = CustomerAccountClient::changePasswordClient($passwordInfo, $accountId, $unlockAccount, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param CustomerLoginInfo $customerAuthInfo The authentication information for the customer account.
	* @return CustomerAuthTicket 
	* @deprecated deprecated since version 1.17
	*/
	public function addLoginToExistingCustomer($customerAuthInfo, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addLoginToExistingCustomerClient($customerAuthInfo, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addLoginToExistingCustomerAsync($customerAuthInfo, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addLoginToExistingCustomerClient($customerAuthInfo, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId The unique identifier of the customer account for which to calculate customer lifetime value.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function recomputeCustomerLifetimeValue($accountId)
	{
		$mozuClient = CustomerAccountClient::recomputeCustomerLifetimeValueClient($accountId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId The unique identifier of the customer account for which to calculate customer lifetime value.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function recomputeCustomerLifetimeValueAsync($accountId)
	{
		$mozuClient = CustomerAccountClient::recomputeCustomerLifetimeValueClient($accountId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId The unique identifier of the customer account.
	* @param string $userId 
	* @param bool $isLocked If true, the customer account is locked from logging in.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function setLoginLocked($isLocked, $accountId, $userId =  null)
	{
		$mozuClient = CustomerAccountClient::setLoginLockedClient($isLocked, $accountId, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId The unique identifier of the customer account.
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function setLoginLockedAsync($isLocked, $accountId, $userId =  null)
	{
		$mozuClient = CustomerAccountClient::setLoginLockedClient($isLocked, $accountId, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $userId 
	* @param bool $isPasswordChangeRequired If true, the password for the customer account must be changed.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function setPasswordChangeRequired($isPasswordChangeRequired, $accountId, $userId =  null)
	{
		$mozuClient = CustomerAccountClient::setPasswordChangeRequiredClient($isPasswordChangeRequired, $accountId, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $userId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function setPasswordChangeRequiredAsync($isPasswordChangeRequired, $accountId, $userId =  null)
	{
		$mozuClient = CustomerAccountClient::setPasswordChangeRequiredClient($isPasswordChangeRequired, $accountId, $userId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param CustomerAccountAndAuthInfo $accountAndAuthInfo Properties of the customer account to create, including the user authentication information.
	* @return CustomerAuthTicket 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccountAndLogin($accountAndAuthInfo, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addAccountAndLoginClient($accountAndAuthInfo, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountAndLoginAsync($accountAndAuthInfo, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addAccountAndLoginClient($accountAndAuthInfo, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param array|CustomerAccountAndAuthInfo $customers Properties of the customer accounts to create.
	* @return CustomerAccountCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function addAccounts($customers, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addAccountsClient($customers, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addAccountsAsync($customers, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addAccountsClient($customers, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param AccountPasswordInfoCollection $accountPasswordInfos 
	* @return ChangePasswordResultCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function changePasswords($accountPasswordInfos, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::changePasswordsClient($accountPasswordInfos, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function changePasswordsAsync($accountPasswordInfos, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::changePasswordsClient($accountPasswordInfos, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $customerSetCode 
	* @param string $emailAddress The email address associated with the customer account.
	* @param string $responseFields 
	* @return LoginState 
	* @deprecated deprecated since version 1.17
	*/
	public function getLoginStateByEmailAddress($emailAddress, $customerSetCode =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByEmailAddressClient($emailAddress, $customerSetCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $customerSetCode 
	* @param string $emailAddress The email address associated with the customer account.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLoginStateByEmailAddressAsync($emailAddress, $customerSetCode =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByEmailAddressClient($emailAddress, $customerSetCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $customerSetCode 
	* @param string $responseFields 
	* @param string $userName The user name associated with the customer account.
	* @return LoginState 
	* @deprecated deprecated since version 1.17
	*/
	public function getLoginStateByUserName($userName, $customerSetCode =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByUserNameClient($userName, $customerSetCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $customerSetCode 
	* @param string $responseFields 
	* @param string $userName The user name associated with the customer account.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLoginStateByUserNameAsync($userName, $customerSetCode =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByUserNameClient($userName, $customerSetCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $accountType 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CustomerPurchaseOrderAccountCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getCustomersPurchaseOrderAccounts($startIndex =  null, $pageSize =  null, $sortBy =  null, $accountType =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getCustomersPurchaseOrderAccountsClient($startIndex, $pageSize, $sortBy, $accountType, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $accountType 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getCustomersPurchaseOrderAccountsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $accountType =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getCustomersPurchaseOrderAccountsClient($startIndex, $pageSize, $sortBy, $accountType, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param ResetPasswordInfo $resetPasswordInfo Information required to reset the password for a customer account.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function resetPassword($resetPasswordInfo)
	{
		$mozuClient = CustomerAccountClient::resetPasswordClient($resetPasswordInfo);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function resetPasswordAsync($resetPasswordInfo)
	{
		$mozuClient = CustomerAccountClient::resetPasswordClient($resetPasswordInfo);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return CustomerAccount 
	* @deprecated deprecated since version 1.17
	*/
	public function updateAccount($account, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::updateAccountClient($account, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateAccountAsync($account, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::updateAccountClient($account, $accountId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteAccount($accountId)
	{
		$mozuClient = CustomerAccountClient::deleteAccountClient($accountId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteAccountAsync($accountId)
	{
		$mozuClient = CustomerAccountClient::deleteAccountClient($accountId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

