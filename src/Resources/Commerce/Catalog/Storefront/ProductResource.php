<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Storefront;

use Mozu\Api\Clients\Commerce\Catalog\Storefront\ProductClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Headers;

/**
* Use the Storefront Products  resource to manage the shopper product selection process during a visit to the web storefront. You can update product options as shoppers pick and choose their product choices. A shopper cannot add a product to a cart until all of its required options have been selected.
*/
class ProductResource {

		private $apiContext;
		private $dataViewMode;
		public function __construct(ApiContext $apiContext, $dataViewMode) 
	{
		$this->apiContext = $apiContext;
		$this->dataViewMode = $dataViewMode;
	}
	



	/**
	* 
	*
	* @param string $cursorMark 
	* @param string $defaultSort 
	* @param string $filter 
	* @param int $pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200.
	* @param string $responseFields 
	* @param string $responseOptions 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return ProductCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getProducts($filter =  null, $startIndex =  null, $pageSize =  null, $sortBy =  null, $responseOptions =  null, $cursorMark =  null, $defaultSort =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductsClient($this->dataViewMode, $filter, $startIndex, $pageSize, $sortBy, $responseOptions, $cursorMark, $defaultSort, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $cursorMark 
	* @param string $defaultSort 
	* @param string $filter 
	* @param int $pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200.
	* @param string $responseFields 
	* @param string $responseOptions 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductsAsync($filter =  null, $startIndex =  null, $pageSize =  null, $sortBy =  null, $responseOptions =  null, $cursorMark =  null, $defaultSort =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductsClient($this->dataViewMode, $filter, $startIndex, $pageSize, $sortBy, $responseOptions, $cursorMark, $defaultSort, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $locationCodes Array of location codes for which to retrieve product inventory information.
	* @param string $productCode 
	* @param string $responseFields 
	* @return LocationInventoryCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getProductInventory($productCode, $locationCodes =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductInventoryClient($this->dataViewMode, $productCode, $locationCodes, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationCodes Array of location codes for which to retrieve product inventory information.
	* @param string $productCode 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductInventoryAsync($productCode, $locationCodes =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductInventoryClient($this->dataViewMode, $productCode, $locationCodes, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $acceptVariantProductCode 
	* @param bool $allowInactive If true, returns an inactive product as part of the query.
	* @param string $productCode 
	* @param string $purchaseLocation 
	* @param int $quantity 
	* @param string $responseFields 
	* @param bool $skipInventoryCheck If true, skip the inventory validation process for the specified product.
	* @param bool $supressOutOfStock404 
	* @param string $variationProductCode Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	* @param string $variationProductCodeFilter 
	* @return Product 
	* @deprecated deprecated since version 1.17
	*/
	public function getProduct($productCode, $variationProductCode =  null, $allowInactive =  null, $skipInventoryCheck =  null, $supressOutOfStock404 =  null, $quantity =  null, $acceptVariantProductCode =  null, $purchaseLocation =  null, $variationProductCodeFilter =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductClient($this->dataViewMode, $productCode, $variationProductCode, $allowInactive, $skipInventoryCheck, $supressOutOfStock404, $quantity, $acceptVariantProductCode, $purchaseLocation, $variationProductCodeFilter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $acceptVariantProductCode 
	* @param bool $allowInactive If true, returns an inactive product as part of the query.
	* @param string $productCode 
	* @param string $purchaseLocation 
	* @param int $quantity 
	* @param string $responseFields 
	* @param bool $skipInventoryCheck If true, skip the inventory validation process for the specified product.
	* @param bool $supressOutOfStock404 
	* @param string $variationProductCode Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	* @param string $variationProductCodeFilter 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductAsync($productCode, $variationProductCode =  null, $allowInactive =  null, $skipInventoryCheck =  null, $supressOutOfStock404 =  null, $quantity =  null, $acceptVariantProductCode =  null, $purchaseLocation =  null, $variationProductCodeFilter =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductClient($this->dataViewMode, $productCode, $variationProductCode, $allowInactive, $skipInventoryCheck, $supressOutOfStock404, $quantity, $acceptVariantProductCode, $purchaseLocation, $variationProductCodeFilter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param DateTime $lastModifiedDate 
	* @param string $productCode 
	* @param long $productVersion 
	* @param string $responseFields 
	* @return Product 
	* @deprecated deprecated since version 1.17
	*/
	public function getProductForIndexing($productCode, $productVersion =  null, $lastModifiedDate =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductForIndexingClient($this->dataViewMode, $productCode, $productVersion, $lastModifiedDate, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param DateTime $lastModifiedDate 
	* @param string $productCode 
	* @param long $productVersion 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductForIndexingAsync($productCode, $productVersion =  null, $lastModifiedDate =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductForIndexingClient($this->dataViewMode, $productCode, $productVersion, $lastModifiedDate, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $includeOptionDetails If true, the response returns details about the product. If false, returns a product summary such as the product name, price, and sale price.
	* @param string $productCode 
	* @param string $purchaseLocation 
	* @param int $quantity 
	* @param string $responseFields 
	* @param bool $skipInventoryCheck If true, skip the inventory validation process for the specified product.
	* @param string $variationProductCodeFilter 
	* @param ProductOptionSelections $productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	* @return ConfiguredProduct 
	* @deprecated deprecated since version 1.17
	*/
	public function configuredProduct($productOptionSelections, $productCode, $includeOptionDetails =  null, $skipInventoryCheck =  null, $quantity =  null, $purchaseLocation =  null, $variationProductCodeFilter =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::configuredProductClient($productOptionSelections, $productCode, $includeOptionDetails, $skipInventoryCheck, $quantity, $purchaseLocation, $variationProductCodeFilter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $includeOptionDetails If true, the response returns details about the product. If false, returns a product summary such as the product name, price, and sale price.
	* @param string $productCode 
	* @param string $purchaseLocation 
	* @param int $quantity 
	* @param string $responseFields 
	* @param bool $skipInventoryCheck If true, skip the inventory validation process for the specified product.
	* @param string $variationProductCodeFilter 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function configuredProductAsync($productOptionSelections, $productCode, $includeOptionDetails =  null, $skipInventoryCheck =  null, $quantity =  null, $purchaseLocation =  null, $variationProductCodeFilter =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::configuredProductClient($productOptionSelections, $productCode, $includeOptionDetails, $skipInventoryCheck, $quantity, $purchaseLocation, $variationProductCodeFilter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param string $purchaseLocation 
	* @param int $quantity 
	* @param string $responseFields 
	* @param bool $skipDefaults 
	* @param bool $skipInventoryCheck If true, skip the inventory validation process for the specified product.
	* @param ProductOptionSelections $productOptionSelections For a product with shopper-configurable options, the properties of the product options selected by the shopper.
	* @return ProductValidationSummary 
	* @deprecated deprecated since version 1.17
	*/
	public function validateProduct($productOptionSelections, $productCode, $skipInventoryCheck =  null, $quantity =  null, $skipDefaults =  null, $purchaseLocation =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::validateProductClient($productOptionSelections, $productCode, $skipInventoryCheck, $quantity, $skipDefaults, $purchaseLocation, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $productCode 
	* @param string $purchaseLocation 
	* @param int $quantity 
	* @param string $responseFields 
	* @param bool $skipDefaults 
	* @param bool $skipInventoryCheck If true, skip the inventory validation process for the specified product.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function validateProductAsync($productOptionSelections, $productCode, $skipInventoryCheck =  null, $quantity =  null, $skipDefaults =  null, $purchaseLocation =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::validateProductClient($productOptionSelections, $productCode, $skipInventoryCheck, $quantity, $skipDefaults, $purchaseLocation, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $allowInactive If true, this operation returns inactive product discounts as part of the POST.
	* @param int $customerAccountId Unique ID of the customer account associated with the shopper requesting the discount.
	* @param string $productCode 
	* @param string $responseFields 
	* @param bool $skipInventoryCheck If true, do not validate the product inventory when evaluating the list of discounts.
	* @param string $variationProductCode Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	* @param DiscountSelections $discountSelections List of discount IDs to evaluate for the specified product.
	* @return DiscountValidationSummary 
	* @deprecated deprecated since version 1.17
	*/
	public function validateDiscounts($discountSelections, $productCode, $variationProductCode =  null, $customerAccountId =  null, $allowInactive =  null, $skipInventoryCheck =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::validateDiscountsClient($discountSelections, $productCode, $variationProductCode, $customerAccountId, $allowInactive, $skipInventoryCheck, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $allowInactive If true, this operation returns inactive product discounts as part of the POST.
	* @param int $customerAccountId Unique ID of the customer account associated with the shopper requesting the discount.
	* @param string $productCode 
	* @param string $responseFields 
	* @param bool $skipInventoryCheck If true, do not validate the product inventory when evaluating the list of discounts.
	* @param string $variationProductCode Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function validateDiscountsAsync($discountSelections, $productCode, $variationProductCode =  null, $customerAccountId =  null, $allowInactive =  null, $skipInventoryCheck =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::validateDiscountsClient($discountSelections, $productCode, $variationProductCode, $customerAccountId, $allowInactive, $skipInventoryCheck, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param ProductCostQuery $query 
	* @return ProductCostCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getProductCosts($query, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductCostsClient($this->dataViewMode, $query, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductCostsAsync($query, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductCostsClient($this->dataViewMode, $query, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param LocationInventoryQuery $query 
	* @return LocationInventoryCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getProductInventories($query, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductInventoriesClient($this->dataViewMode, $query, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductInventoriesAsync($query, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductInventoriesClient($this->dataViewMode, $query, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

