<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\Clients\Commerce\Catalog\Admin\SoftAllocationClient;
use Mozu\Api\ApiContext;


/**
* 
*/
class SoftAllocationResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return SoftAllocationCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getSoftAllocations($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationsClient($startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getSoftAllocationsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationsClient($startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param int $softAllocationId 
	* @return SoftAllocation 
	* @deprecated deprecated since version 1.17
	*/
	public function getSoftAllocation($softAllocationId, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationClient($softAllocationId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param int $softAllocationId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getSoftAllocationAsync($softAllocationId, $responseFields =  null)
	{
		$mozuClient = SoftAllocationClient::getSoftAllocationClient($softAllocationId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param array|SoftAllocation $softAllocationsIn 
	* @return array|SoftAllocation 
	* @deprecated deprecated since version 1.17
	*/
	public function addSoftAllocations($softAllocationsIn)
	{
		$mozuClient = SoftAllocationClient::addSoftAllocationsClient($softAllocationsIn);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addSoftAllocationsAsync($softAllocationsIn)
	{
		$mozuClient = SoftAllocationClient::addSoftAllocationsClient($softAllocationsIn);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param array|SoftAllocation $softAllocations 
	* @return array|ProductReservation 
	* @deprecated deprecated since version 1.17
	*/
	public function convertToProductReservation($softAllocations)
	{
		$mozuClient = SoftAllocationClient::convertToProductReservationClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function convertToProductReservationAsync($softAllocations)
	{
		$mozuClient = SoftAllocationClient::convertToProductReservationClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param SoftAllocationRenew $softAllocationRenew 
	* @return array|SoftAllocation 
	* @deprecated deprecated since version 1.17
	*/
	public function renewSoftAllocations($softAllocationRenew)
	{
		$mozuClient = SoftAllocationClient::renewSoftAllocationsClient($softAllocationRenew);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function renewSoftAllocationsAsync($softAllocationRenew)
	{
		$mozuClient = SoftAllocationClient::renewSoftAllocationsClient($softAllocationRenew);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param array|SoftAllocation $softAllocations 
	* @return array|SoftAllocation 
	* @deprecated deprecated since version 1.17
	*/
	public function updateSoftAllocations($softAllocations)
	{
		$mozuClient = SoftAllocationClient::updateSoftAllocationsClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateSoftAllocationsAsync($softAllocations)
	{
		$mozuClient = SoftAllocationClient::updateSoftAllocationsClient($softAllocations);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $softAllocationId 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteSoftAllocation($softAllocationId)
	{
		$mozuClient = SoftAllocationClient::deleteSoftAllocationClient($softAllocationId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $softAllocationId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteSoftAllocationAsync($softAllocationId)
	{
		$mozuClient = SoftAllocationClient::deleteSoftAllocationClient($softAllocationId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

