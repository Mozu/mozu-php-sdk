<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\Clients\Commerce\Catalog\Admin\CategoryClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Headers;

/**
* Use the Categories resource to organize products and control where they appear on the storefront. Create and maintain a hierarchy of categories and subcategories where the site will store properties.
*/
class CategoryResource {

		private $apiContext;
		private $dataViewMode;
		public function __construct(ApiContext $apiContext, $dataViewMode) 
	{
		$this->apiContext = $apiContext;
		$this->dataViewMode = $dataViewMode;
	}
	



	/**
	* 
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter product category search results by any of its properties, including its position in the category hierarchy. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CategoryPagedCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getCategories($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = CategoryClient::getCategoriesClient($this->dataViewMode, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter product category search results by any of its properties, including its position in the category hierarchy. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getCategoriesAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = CategoryClient::getCategoriesClient($this->dataViewMode, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $categoryId Unique identifier of the category for which to retrieve subcategories.
	* @param string $responseFields 
	* @return CategoryCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getChildCategories($categoryId, $responseFields =  null)
	{
		$mozuClient = CategoryClient::getChildCategoriesClient($categoryId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $categoryId Unique identifier of the category for which to retrieve subcategories.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getChildCategoriesAsync($categoryId, $responseFields =  null)
	{
		$mozuClient = CategoryClient::getChildCategoriesClient($categoryId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $categoryId Unique identifier of the category to retrieve.
	* @param string $responseFields 
	* @return Category 
	* @deprecated deprecated since version 1.17
	*/
	public function getCategory($categoryId, $responseFields =  null)
	{
		$mozuClient = CategoryClient::getCategoryClient($this->dataViewMode, $categoryId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $categoryId Unique identifier of the category to retrieve.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getCategoryAsync($categoryId, $responseFields =  null)
	{
		$mozuClient = CategoryClient::getCategoryClient($this->dataViewMode, $categoryId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $incrementSequence If true, when adding a new product category, set the sequence number of the new category to an increment of one integer greater than the maximum available sequence number across all product categories. If false, set the sequence number to zero.
	* @param string $responseFields 
	* @param bool $useProvidedId 
	* @param Category $category Properties of the new category to create. You must specify a name and parent category if you want to create it as a subcategory.
	* @return Category 
	* @deprecated deprecated since version 1.17
	*/
	public function addCategory($category, $incrementSequence =  null, $useProvidedId =  null, $responseFields =  null)
	{
		$mozuClient = CategoryClient::addCategoryClient($category, $incrementSequence, $useProvidedId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $incrementSequence If true, when adding a new product category, set the sequence number of the new category to an increment of one integer greater than the maximum available sequence number across all product categories. If false, set the sequence number to zero.
	* @param string $responseFields 
	* @param bool $useProvidedId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addCategoryAsync($category, $incrementSequence =  null, $useProvidedId =  null, $responseFields =  null)
	{
		$mozuClient = CategoryClient::addCategoryClient($category, $incrementSequence, $useProvidedId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $categoryId 
	* @param array|string $productCodes 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function addProductsToCategory($productCodes, $categoryId)
	{
		$mozuClient = CategoryClient::addProductsToCategoryClient($this->dataViewMode, $productCodes, $categoryId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $categoryId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addProductsToCategoryAsync($productCodes, $categoryId)
	{
		$mozuClient = CategoryClient::addProductsToCategoryClient($this->dataViewMode, $productCodes, $categoryId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $categoryId 
	* @param array|string $productCodes 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function removeProductsFromCategory($productCodes, $categoryId)
	{
		$mozuClient = CategoryClient::removeProductsFromCategoryClient($productCodes, $categoryId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $categoryId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function removeProductsFromCategoryAsync($productCodes, $categoryId)
	{
		$mozuClient = CategoryClient::removeProductsFromCategoryClient($productCodes, $categoryId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param DynamicExpression $dynamicExpressionIn 
	* @return DynamicExpression 
	* @deprecated deprecated since version 1.17
	*/
	public function validateDynamicExpression($dynamicExpressionIn, $responseFields =  null)
	{
		$mozuClient = CategoryClient::validateDynamicExpressionClient($dynamicExpressionIn, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function validateDynamicExpressionAsync($dynamicExpressionIn, $responseFields =  null)
	{
		$mozuClient = CategoryClient::validateDynamicExpressionClient($dynamicExpressionIn, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param DynamicExpression $dynamicExpressionIn 
	* @return DynamicExpression 
	* @deprecated deprecated since version 1.17
	*/
	public function validateRealTimeDynamicExpression($dynamicExpressionIn, $responseFields =  null)
	{
		$mozuClient = CategoryClient::validateRealTimeDynamicExpressionClient($dynamicExpressionIn, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function validateRealTimeDynamicExpressionAsync($dynamicExpressionIn, $responseFields =  null)
	{
		$mozuClient = CategoryClient::validateRealTimeDynamicExpressionClient($dynamicExpressionIn, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $cascadeVisibility If true, when changing the display option for the category, change it for all subcategories also. Default: False.
	* @param int $categoryId Unique identifier of the category to modify.
	* @param string $responseFields 
	* @param Category $category Properties of the category to modify.
	* @return Category 
	* @deprecated deprecated since version 1.17
	*/
	public function updateCategory($category, $categoryId, $cascadeVisibility =  null, $responseFields =  null)
	{
		$mozuClient = CategoryClient::updateCategoryClient($category, $categoryId, $cascadeVisibility, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $cascadeVisibility If true, when changing the display option for the category, change it for all subcategories also. Default: False.
	* @param int $categoryId Unique identifier of the category to modify.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateCategoryAsync($category, $categoryId, $cascadeVisibility =  null, $responseFields =  null)
	{
		$mozuClient = CategoryClient::updateCategoryClient($category, $categoryId, $cascadeVisibility, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $cascadeDelete If true, also delete all subcategories associated with the specified category.
	* @param int $categoryId Unique identifier of the category to delete.
	* @param bool $forceDelete 
	* @param bool $reassignToParent 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteCategoryById($categoryId, $cascadeDelete =  null, $forceDelete =  null, $reassignToParent =  null)
	{
		$mozuClient = CategoryClient::deleteCategoryByIdClient($categoryId, $cascadeDelete, $forceDelete, $reassignToParent);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $cascadeDelete If true, also delete all subcategories associated with the specified category.
	* @param int $categoryId Unique identifier of the category to delete.
	* @param bool $forceDelete 
	* @param bool $reassignToParent 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteCategoryByIdAsync($categoryId, $cascadeDelete =  null, $forceDelete =  null, $reassignToParent =  null)
	{
		$mozuClient = CategoryClient::deleteCategoryByIdClient($categoryId, $cascadeDelete, $forceDelete, $reassignToParent);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

