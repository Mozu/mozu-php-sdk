<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin\Products;

use Mozu\Api\Clients\Commerce\Catalog\Admin\Products\LocationInventoryClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Headers;

/**
* Use the Product Location Inventory resource to manage the levels of active product inventory to maintain across defined locations at the product level.
*/
class LocationInventoryResource {

		private $apiContext;
		private $dataViewMode;
		public function __construct(ApiContext $apiContext, $dataViewMode) 
	{
		$this->apiContext = $apiContext;
		$this->dataViewMode = $dataViewMode;
	}
	



	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $productCode 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return LocationInventoryCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getLocationInventories($productCode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoriesClient($this->dataViewMode, $productCode, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $productCode 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLocationInventoriesAsync($productCode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoriesClient($this->dataViewMode, $productCode, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $locationCode User-defined code that identifies the location.
	* @param string $productCode 
	* @param string $responseFields 
	* @return LocationInventory 
	* @deprecated deprecated since version 1.17
	*/
	public function getLocationInventory($productCode, $locationCode, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoryClient($this->dataViewMode, $productCode, $locationCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationCode User-defined code that identifies the location.
	* @param string $productCode 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLocationInventoryAsync($productCode, $locationCode, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoryClient($this->dataViewMode, $productCode, $locationCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $performUpserts The performUpserts query string parameter lets the service perform an update if the record already exists instead of throwing an already exists conflict exception. PerformUpserts=true means it updates if the record already exists. By default, no value specified means that the service assumes PerformUpserts=false.
	* @param string $productCode 
	* @param array|LocationInventory $locationInventoryList Array list of the location inventory definitions associated with the product code specified in the request. For each location, you must define the locationCode value and the stockOnHand value. All other properties in the array are system-supplied and read only.
	* @return array|LocationInventory 
	* @deprecated deprecated since version 1.17
	*/
	public function addLocationInventory($locationInventoryList, $productCode, $performUpserts =  null)
	{
		$mozuClient = LocationInventoryClient::addLocationInventoryClient($this->dataViewMode, $locationInventoryList, $productCode, $performUpserts);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $performUpserts The performUpserts query string parameter lets the service perform an update if the record already exists instead of throwing an already exists conflict exception. PerformUpserts=true means it updates if the record already exists. By default, no value specified means that the service assumes PerformUpserts=false.
	* @param string $productCode 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addLocationInventoryAsync($locationInventoryList, $productCode, $performUpserts =  null)
	{
		$mozuClient = LocationInventoryClient::addLocationInventoryClient($this->dataViewMode, $locationInventoryList, $productCode, $performUpserts);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $productCode The product code of the product for which to update active stock on hand inventory at a specified location.
	* @param array|LocationInventoryAdjustment $locationInventoryAdjustments Properties of the inventory adjustments to perform for the specified location.
	* @return array|LocationInventory 
	* @deprecated deprecated since version 1.17
	*/
	public function updateLocationInventory($locationInventoryAdjustments, $productCode)
	{
		$mozuClient = LocationInventoryClient::updateLocationInventoryClient($this->dataViewMode, $locationInventoryAdjustments, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $productCode The product code of the product for which to update active stock on hand inventory at a specified location.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateLocationInventoryAsync($locationInventoryAdjustments, $productCode)
	{
		$mozuClient = LocationInventoryClient::updateLocationInventoryClient($this->dataViewMode, $locationInventoryAdjustments, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $locationCode The code that identifies the location for which to delete product inventory.
	* @param string $productCode The product code for which to delete a location's inventory.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteLocationInventory($productCode, $locationCode)
	{
		$mozuClient = LocationInventoryClient::deleteLocationInventoryClient($this->dataViewMode, $productCode, $locationCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationCode The code that identifies the location for which to delete product inventory.
	* @param string $productCode The product code for which to delete a location's inventory.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteLocationInventoryAsync($productCode, $locationCode)
	{
		$mozuClient = LocationInventoryClient::deleteLocationInventoryClient($this->dataViewMode, $productCode, $locationCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

