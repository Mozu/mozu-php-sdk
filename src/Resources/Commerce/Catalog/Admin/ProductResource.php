<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\Clients\Commerce\Catalog\Admin\ProductClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Headers;

/**
* Use the Product Administration resource to create new product definitions in the master catalog and determine which catalogs will feature products. You can also assign attribute values for defined products, manage product-level location inventory, and configure the variations of a product.
*/
class ProductResource {

		private $apiContext;
		private $dataViewMode;
		public function __construct(ApiContext $apiContext, $dataViewMode) 
	{
		$this->apiContext = $apiContext;
		$this->dataViewMode = $dataViewMode;
	}
	



	/**
	* 
	*
	* @param string $filter 
	* @param bool $noCount If true, the operation does not return the TotalCount number of results.
	* @param int $pageSize 
	* @param string $q A list of product search terms to use in the query when searching across product code and product name. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return ProductCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getProducts($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $noCount =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductsClient($this->dataViewMode, $startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $noCount, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter 
	* @param bool $noCount If true, the operation does not return the TotalCount number of results.
	* @param int $pageSize 
	* @param string $q A list of product search terms to use in the query when searching across product code and product name. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $noCount =  null, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductsClient($this->dataViewMode, $startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $noCount, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @return array|ProductInCatalogInfo 
	* @deprecated deprecated since version 1.17
	*/
	public function getProductInCatalogs($productCode)
	{
		$mozuClient = ProductClient::getProductInCatalogsClient($this->dataViewMode, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $productCode 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductInCatalogsAsync($productCode)
	{
		$mozuClient = ProductClient::getProductInCatalogsClient($this->dataViewMode, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @param string $responseFields 
	* @return ProductInCatalogInfo 
	* @deprecated deprecated since version 1.17
	*/
	public function getProductInCatalog($productCode, $catalogId, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductInCatalogClient($this->dataViewMode, $productCode, $catalogId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductInCatalogAsync($productCode, $catalogId, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductInCatalogClient($this->dataViewMode, $productCode, $catalogId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param string $responseFields 
	* @return Product 
	* @deprecated deprecated since version 1.17
	*/
	public function getProduct($productCode, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductClient($this->dataViewMode, $productCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $productCode 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getProductAsync($productCode, $responseFields =  null)
	{
		$mozuClient = ProductClient::getProductClient($this->dataViewMode, $productCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param Product $product Properties of the new product. You must supply values for the product code, product name, and price.
	* @return Product 
	* @deprecated deprecated since version 1.17
	*/
	public function addProduct($product, $responseFields =  null)
	{
		$mozuClient = ProductClient::addProductClient($this->dataViewMode, $product, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addProductAsync($product, $responseFields =  null)
	{
		$mozuClient = ProductClient::addProductClient($this->dataViewMode, $product, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param string $responseFields 
	* @param ProductInCatalogInfo $productInCatalogInfoIn Properties of the product to define for the specific catalog association.
	* @return ProductInCatalogInfo 
	* @deprecated deprecated since version 1.17
	*/
	public function addProductInCatalog($productInCatalogInfoIn, $productCode, $responseFields =  null)
	{
		$mozuClient = ProductClient::addProductInCatalogClient($this->dataViewMode, $productInCatalogInfoIn, $productCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $productCode 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addProductInCatalogAsync($productInCatalogInfoIn, $productCode, $responseFields =  null)
	{
		$mozuClient = ProductClient::addProductInCatalogClient($this->dataViewMode, $productInCatalogInfoIn, $productCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param array|ProductCodeRename $productCodeRenames 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function renameProductCodes($productCodeRenames)
	{
		$mozuClient = ProductClient::renameProductCodesClient($productCodeRenames);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function renameProductCodesAsync($productCodeRenames)
	{
		$mozuClient = ProductClient::renameProductCodesClient($productCodeRenames);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param array|ProductInCatalogInfo $productInCatalogsIn Properties of the product to update for each associated catalog.
	* @return array|ProductInCatalogInfo 
	* @deprecated deprecated since version 1.17
	*/
	public function updateProductInCatalogs($productInCatalogsIn, $productCode)
	{
		$mozuClient = ProductClient::updateProductInCatalogsClient($this->dataViewMode, $productInCatalogsIn, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $productCode 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateProductInCatalogsAsync($productInCatalogsIn, $productCode)
	{
		$mozuClient = ProductClient::updateProductInCatalogsClient($this->dataViewMode, $productInCatalogsIn, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @param string $responseFields 
	* @param ProductInCatalogInfo $productInCatalogInfoIn Properties of the product associated with the catalog specified in the request.
	* @return ProductInCatalogInfo 
	* @deprecated deprecated since version 1.17
	*/
	public function updateProductInCatalog($productInCatalogInfoIn, $productCode, $catalogId, $responseFields =  null)
	{
		$mozuClient = ProductClient::updateProductInCatalogClient($this->dataViewMode, $productInCatalogInfoIn, $productCode, $catalogId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateProductInCatalogAsync($productInCatalogInfoIn, $productCode, $catalogId, $responseFields =  null)
	{
		$mozuClient = ProductClient::updateProductInCatalogClient($this->dataViewMode, $productInCatalogInfoIn, $productCode, $catalogId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param string $responseFields 
	* @param Product $product Properties of the product definition to update in the master catalog.
	* @return Product 
	* @deprecated deprecated since version 1.17
	*/
	public function updateProduct($product, $productCode, $responseFields =  null)
	{
		$mozuClient = ProductClient::updateProductClient($this->dataViewMode, $product, $productCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $productCode 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateProductAsync($product, $productCode, $responseFields =  null)
	{
		$mozuClient = ProductClient::updateProductClient($this->dataViewMode, $product, $productCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteProduct($productCode)
	{
		$mozuClient = ProductClient::deleteProductClient($this->dataViewMode, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $productCode 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteProductAsync($productCode)
	{
		$mozuClient = ProductClient::deleteProductClient($this->dataViewMode, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteProductInCatalog($productCode, $catalogId)
	{
		$mozuClient = ProductClient::deleteProductInCatalogClient($this->dataViewMode, $productCode, $catalogId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteProductInCatalogAsync($productCode, $catalogId)
	{
		$mozuClient = ProductClient::deleteProductInCatalogClient($this->dataViewMode, $productCode, $catalogId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

