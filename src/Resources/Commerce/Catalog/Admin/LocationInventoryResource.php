<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\Clients\Commerce\Catalog\Admin\LocationInventoryClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Headers;

/**
* Use the Location Inventory resource to manage the level of active product inventory maintained at each defined location, at the location level.
*/
class LocationInventoryResource {

		private $apiContext;
		private $dataViewMode;
		public function __construct(ApiContext $apiContext, $dataViewMode) 
	{
		$this->apiContext = $apiContext;
		$this->dataViewMode = $dataViewMode;
	}
	



	/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param string $productCode 
	* @param string $responseFields 
	* @return LocationInventory 
	* @deprecated deprecated since version 1.17
	*/
	public function getLocationInventory($locationCode, $productCode, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoryClient($this->dataViewMode, $locationCode, $productCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param string $productCode 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLocationInventoryAsync($locationCode, $productCode, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoryClient($this->dataViewMode, $locationCode, $productCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $filter 
	* @param string $filterFunctions 
	* @param string $locationCode 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return LocationInventoryCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getLocationInventories($locationCode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $filterFunctions =  null, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoriesClient($this->dataViewMode, $locationCode, $startIndex, $pageSize, $sortBy, $filter, $filterFunctions, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter 
	* @param string $filterFunctions 
	* @param string $locationCode 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLocationInventoriesAsync($locationCode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $filterFunctions =  null, $responseFields =  null)
	{
		$mozuClient = LocationInventoryClient::getLocationInventoriesClient($this->dataViewMode, $locationCode, $startIndex, $pageSize, $sortBy, $filter, $filterFunctions, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param bool $performUpserts 
	* @param array|LocationInventory $locationInventoryList Array list of product inventory definitions for all associated locations. For each location inventory in the list, define the productCode and stockOnHand values.
	* @return array|LocationInventory 
	* @deprecated deprecated since version 1.17
	*/
	public function addLocationInventory($locationInventoryList, $locationCode, $performUpserts =  null)
	{
		$mozuClient = LocationInventoryClient::addLocationInventoryClient($this->dataViewMode, $locationInventoryList, $locationCode, $performUpserts);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param bool $performUpserts 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addLocationInventoryAsync($locationInventoryList, $locationCode, $performUpserts =  null)
	{
		$mozuClient = LocationInventoryClient::addLocationInventoryClient($this->dataViewMode, $locationInventoryList, $locationCode, $performUpserts);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param array|LocationInventoryAdjustment $locationInventoryAdjustments Properties of the inventory adjustments to perform for the specified location.
	* @return array|LocationInventory 
	* @deprecated deprecated since version 1.17
	*/
	public function updateLocationInventory($locationInventoryAdjustments, $locationCode)
	{
		$mozuClient = LocationInventoryClient::updateLocationInventoryClient($this->dataViewMode, $locationInventoryAdjustments, $locationCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateLocationInventoryAsync($locationInventoryAdjustments, $locationCode)
	{
		$mozuClient = LocationInventoryClient::updateLocationInventoryClient($this->dataViewMode, $locationInventoryAdjustments, $locationCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param string $productCode 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteLocationInventory($locationCode, $productCode)
	{
		$mozuClient = LocationInventoryClient::deleteLocationInventoryClient($this->dataViewMode, $locationCode, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param string $productCode 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteLocationInventoryAsync($locationCode, $productCode)
	{
		$mozuClient = LocationInventoryClient::deleteLocationInventoryClient($this->dataViewMode, $locationCode, $productCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

