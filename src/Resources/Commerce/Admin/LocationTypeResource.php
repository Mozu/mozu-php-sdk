<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Admin;

use Mozu\Api\Clients\Commerce\Admin\LocationTypeClient;
use Mozu\Api\ApiContext;


/**
* Use the Location Types resource to manage the types of locations your tenant maintains, such as warehouses, physical storefronts, and kiosks.
*/
class LocationTypeResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @return array|LocationType 
	* @deprecated deprecated since version 1.17
	*/
	public function getLocationTypes()
	{
		$mozuClient = LocationTypeClient::getLocationTypesClient();
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLocationTypesAsync()
	{
		$mozuClient = LocationTypeClient::getLocationTypesClient();
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $locationTypeCode The user-defined code that identifies the location type.
	* @param string $responseFields 
	* @return LocationType 
	* @deprecated deprecated since version 1.17
	*/
	public function getLocationType($locationTypeCode, $responseFields =  null)
	{
		$mozuClient = LocationTypeClient::getLocationTypeClient($locationTypeCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationTypeCode The user-defined code that identifies the location type.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getLocationTypeAsync($locationTypeCode, $responseFields =  null)
	{
		$mozuClient = LocationTypeClient::getLocationTypeClient($locationTypeCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param LocationType $locationType Properties of the location type to create.
	* @return LocationType 
	* @deprecated deprecated since version 1.17
	*/
	public function addLocationType($locationType, $responseFields =  null)
	{
		$mozuClient = LocationTypeClient::addLocationTypeClient($locationType, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addLocationTypeAsync($locationType, $responseFields =  null)
	{
		$mozuClient = LocationTypeClient::addLocationTypeClient($locationType, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $locationTypeCode The user-defined code that identifies the location type.
	* @param string $responseFields 
	* @param LocationType $locationType Properties of the location type to update.
	* @return LocationType 
	* @deprecated deprecated since version 1.17
	*/
	public function updateLocationType($locationType, $locationTypeCode, $responseFields =  null)
	{
		$mozuClient = LocationTypeClient::updateLocationTypeClient($locationType, $locationTypeCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationTypeCode The user-defined code that identifies the location type.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateLocationTypeAsync($locationType, $locationTypeCode, $responseFields =  null)
	{
		$mozuClient = LocationTypeClient::updateLocationTypeClient($locationType, $locationTypeCode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $locationTypeCode User-defined code used to identify the location type.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteLocationType($locationTypeCode)
	{
		$mozuClient = LocationTypeClient::deleteLocationTypeClient($locationTypeCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $locationTypeCode User-defined code used to identify the location type.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteLocationTypeAsync($locationTypeCode)
	{
		$mozuClient = LocationTypeClient::deleteLocationTypeClient($locationTypeCode);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

