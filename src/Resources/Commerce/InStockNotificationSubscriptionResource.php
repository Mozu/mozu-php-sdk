<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce;

use Mozu\Api\Clients\Commerce\InStockNotificationSubscriptionClient;
use Mozu\Api\ApiContext;


/**
* Use the Customer In-Stock Notification Subscription resource to manage the subscriptions customer accounts use to send product notifications. This resource can send a notification when a product in a catalog returns to a site's active inventory after it is out of stock, or when a new product becomes available for the first time.
*/
class InStockNotificationSubscriptionResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return InStockNotificationSubscriptionCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getInStockNotificationSubscriptions($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = InStockNotificationSubscriptionClient::getInStockNotificationSubscriptionsClient($startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getInStockNotificationSubscriptionsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = InStockNotificationSubscriptionClient::getInStockNotificationSubscriptionsClient($startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $id Unique identifier of the in-stock notification subscription to retrieve.
	* @param string $responseFields 
	* @return InStockNotificationSubscription 
	* @deprecated deprecated since version 1.17
	*/
	public function getInStockNotificationSubscription($id, $responseFields =  null)
	{
		$mozuClient = InStockNotificationSubscriptionClient::getInStockNotificationSubscriptionClient($id, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $id Unique identifier of the in-stock notification subscription to retrieve.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getInStockNotificationSubscriptionAsync($id, $responseFields =  null)
	{
		$mozuClient = InStockNotificationSubscriptionClient::getInStockNotificationSubscriptionClient($id, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param InStockNotificationSubscription $inStockNotificationSubscription Properties of a subscription that sends the customer a notification when a product is available in a site's active stock.
	* @return InStockNotificationSubscription 
	* @deprecated deprecated since version 1.17
	*/
	public function addInStockNotificationSubscription($inStockNotificationSubscription, $responseFields =  null)
	{
		$mozuClient = InStockNotificationSubscriptionClient::addInStockNotificationSubscriptionClient($inStockNotificationSubscription, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addInStockNotificationSubscriptionAsync($inStockNotificationSubscription, $responseFields =  null)
	{
		$mozuClient = InStockNotificationSubscriptionClient::addInStockNotificationSubscriptionClient($inStockNotificationSubscription, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $id Unique identifier of the customer in-stock notification subscription to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteInStockNotificationSubscription($id)
	{
		$mozuClient = InStockNotificationSubscriptionClient::deleteInStockNotificationSubscriptionClient($id);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $id Unique identifier of the customer in-stock notification subscription to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteInStockNotificationSubscriptionAsync($id)
	{
		$mozuClient = InStockNotificationSubscriptionClient::deleteInStockNotificationSubscriptionClient($id);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

