<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Wishlists;

use Mozu\Api\Clients\Commerce\Wishlists\WishlistItemClient;
use Mozu\Api\ApiContext;


/**
* Use the Wish List Items subresource to manage items in a shopper wish list. The same product can be defined as an item in any number of wish lists for the customer account. Use the Wish Lists resource to manage shopper wish lists.
*/
class WishlistItemResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $responseFields 
	* @param string $wishlistId Unique identifier of the wish list item to retrieve.
	* @param string $wishlistItemId Unique identifier of the wish list associated with the item to retrieve.
	* @return WishlistItem 
	* @deprecated deprecated since version 1.17
	*/
	public function getWishlistItem($wishlistId, $wishlistItemId, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::getWishlistItemClient($wishlistId, $wishlistItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $wishlistId Unique identifier of the wish list item to retrieve.
	* @param string $wishlistItemId Unique identifier of the wish list associated with the item to retrieve.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getWishlistItemAsync($wishlistId, $wishlistItemId, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::getWishlistItemClient($wishlistId, $wishlistItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @param string $wishlistId Unique identifier of the wish list associated with the items to retrieve.
	* @return WishlistItemCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getWishlistItems($wishlistId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::getWishlistItemsClient($wishlistId, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @param string $wishlistId Unique identifier of the wish list associated with the items to retrieve.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getWishlistItemsAsync($wishlistId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::getWishlistItemsClient($wishlistId, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $customerAccountId The unique identifier of the customer account associated with the wish list.
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @param string $wishlistName The name of the wish list that contains the items to retrieve.
	* @return WishlistItemCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getWishlistItemsByWishlistName($customerAccountId, $wishlistName, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::getWishlistItemsByWishlistNameClient($customerAccountId, $wishlistName, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $customerAccountId The unique identifier of the customer account associated with the wish list.
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @param string $wishlistName The name of the wish list that contains the items to retrieve.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getWishlistItemsByWishlistNameAsync($customerAccountId, $wishlistName, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::getWishlistItemsByWishlistNameClient($customerAccountId, $wishlistName, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $wishlistId Unique identifier of the wish list associated with the item to add.
	* @param WishlistItem $wishlistItem Properties of the item to add to the wish list.
	* @return WishlistItem 
	* @deprecated deprecated since version 1.17
	*/
	public function addItemToWishlist($wishlistItem, $wishlistId, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::addItemToWishlistClient($wishlistItem, $wishlistId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $wishlistId Unique identifier of the wish list associated with the item to add.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addItemToWishlistAsync($wishlistItem, $wishlistId, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::addItemToWishlistClient($wishlistItem, $wishlistId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $quantity The quantity of the item in the wish list.
	* @param string $responseFields 
	* @param string $wishlistId Unique identifier of the wish list associated with the item quantity to update.
	* @param string $wishlistItemId Unique identifier of the item in the wish list to update quantity.
	* @return WishlistItem 
	* @deprecated deprecated since version 1.17
	*/
	public function updateWishlistItemQuantity($wishlistId, $wishlistItemId, $quantity, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::updateWishlistItemQuantityClient($wishlistId, $wishlistItemId, $quantity, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $quantity The quantity of the item in the wish list.
	* @param string $responseFields 
	* @param string $wishlistId Unique identifier of the wish list associated with the item quantity to update.
	* @param string $wishlistItemId Unique identifier of the item in the wish list to update quantity.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateWishlistItemQuantityAsync($wishlistId, $wishlistItemId, $quantity, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::updateWishlistItemQuantityClient($wishlistId, $wishlistItemId, $quantity, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $wishlistId Unique identifier of the wish list associated with the item to update.
	* @param string $wishlistItemId Unique identifier of the item in the shopper wish list to update.
	* @param WishlistItem $wishlistItem Properties of the shopper wish list item to update.
	* @return WishlistItem 
	* @deprecated deprecated since version 1.17
	*/
	public function updateWishlistItem($wishlistItem, $wishlistId, $wishlistItemId, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::updateWishlistItemClient($wishlistItem, $wishlistId, $wishlistItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $wishlistId Unique identifier of the wish list associated with the item to update.
	* @param string $wishlistItemId Unique identifier of the item in the shopper wish list to update.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateWishlistItemAsync($wishlistItem, $wishlistId, $wishlistItemId, $responseFields =  null)
	{
		$mozuClient = WishlistItemClient::updateWishlistItemClient($wishlistItem, $wishlistId, $wishlistItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $wishlistId Unique identifier of the wish list associated with the items to remove.
	* @return Wishlist 
	* @deprecated deprecated since version 1.17
	*/
	public function removeAllWishlistItems($wishlistId)
	{
		$mozuClient = WishlistItemClient::removeAllWishlistItemsClient($wishlistId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $wishlistId Unique identifier of the wish list associated with the items to remove.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function removeAllWishlistItemsAsync($wishlistId)
	{
		$mozuClient = WishlistItemClient::removeAllWishlistItemsClient($wishlistId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $wishlistId Unique identifier of the wish list associated with the item to remove.
	* @param string $wishlistItemId Unique identifier of the item to remove from the shopper wish list.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteWishlistItem($wishlistId, $wishlistItemId)
	{
		$mozuClient = WishlistItemClient::deleteWishlistItemClient($wishlistId, $wishlistItemId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $wishlistId Unique identifier of the wish list associated with the item to remove.
	* @param string $wishlistItemId Unique identifier of the item to remove from the shopper wish list.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteWishlistItemAsync($wishlistId, $wishlistItemId)
	{
		$mozuClient = WishlistItemClient::deleteWishlistItemClient($wishlistId, $wishlistItemId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

