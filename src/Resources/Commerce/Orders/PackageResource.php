<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Orders;

use Mozu\Api\Clients\Commerce\Orders\PackageClient;
use Mozu\Api\ApiContext;


/**
* Use the Packages subresource to manage the physical packages to ship for an order.
*/
class PackageResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package fulfillment.
	* @param string $packageId Unique identifier of the package associated with the fulfillment actions to retrieve.
	* @return array|string 
	* @deprecated deprecated since version 1.17
	*/
	public function getAvailablePackageFulfillmentActions($orderId, $packageId)
	{
		$mozuClient = PackageClient::getAvailablePackageFulfillmentActionsClient($orderId, $packageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package fulfillment.
	* @param string $packageId Unique identifier of the package associated with the fulfillment actions to retrieve.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAvailablePackageFulfillmentActionsAsync($orderId, $packageId)
	{
		$mozuClient = PackageClient::getAvailablePackageFulfillmentActionsClient($orderId, $packageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package label to retrieve.
	* @param string $packageId Unique identifier of the package for which to retrieve the label.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function getPackageLabel($orderId, $packageId)
	{
		$mozuClient = PackageClient::getPackageLabelClient($orderId, $packageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package label to retrieve.
	* @param string $packageId Unique identifier of the package for which to retrieve the label.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getPackageLabelAsync($orderId, $packageId)
	{
		$mozuClient = PackageClient::getPackageLabelClient($orderId, $packageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package to retrieve.
	* @param string $packageId Unique identifier of the package to retrieve.
	* @param string $responseFields 
	* @return Package 
	* @deprecated deprecated since version 1.17
	*/
	public function getPackage($orderId, $packageId, $responseFields =  null)
	{
		$mozuClient = PackageClient::getPackageClient($orderId, $packageId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package to retrieve.
	* @param string $packageId Unique identifier of the package to retrieve.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getPackageAsync($orderId, $packageId, $responseFields =  null)
	{
		$mozuClient = PackageClient::getPackageClient($orderId, $packageId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with this package.
	* @param string $responseFields 
	* @param Package $package Properties of the physical package of order items.
	* @return Package 
	* @deprecated deprecated since version 1.17
	*/
	public function createPackage($pkg, $orderId, $responseFields =  null)
	{
		$mozuClient = PackageClient::createPackageClient($pkg, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with this package.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createPackageAsync($pkg, $orderId, $responseFields =  null)
	{
		$mozuClient = PackageClient::createPackageClient($pkg, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package to update.
	* @param string $packageId Unique identifier of the package of order items to update.
	* @param string $responseFields 
	* @param Package $package Wrapper of properties for the package of order items to update.
	* @return Package 
	* @deprecated deprecated since version 1.17
	*/
	public function updatePackage($pkg, $orderId, $packageId, $responseFields =  null)
	{
		$mozuClient = PackageClient::updatePackageClient($pkg, $orderId, $packageId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package to update.
	* @param string $packageId Unique identifier of the package of order items to update.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updatePackageAsync($pkg, $orderId, $packageId, $responseFields =  null)
	{
		$mozuClient = PackageClient::updatePackageClient($pkg, $orderId, $packageId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package to delete.
	* @param string $packageId Unique identifier of the package to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deletePackage($orderId, $packageId)
	{
		$mozuClient = PackageClient::deletePackageClient($orderId, $packageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the package to delete.
	* @param string $packageId Unique identifier of the package to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deletePackageAsync($orderId, $packageId)
	{
		$mozuClient = PackageClient::deletePackageClient($orderId, $packageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

