<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Orders;

use Mozu\Api\Clients\Commerce\Orders\DigitalPackageClient;
use Mozu\Api\ApiContext;


/**
* A digital package is a package in a digital format.
*/
class DigitalPackageResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $digitalPackageId This parameter supplies package ID to get fulfillment actions for the digital package.
	* @param string $orderId This parameter provides the unique identifier of the order on which to get a list of available actions.
	* @return array|string 
	* @deprecated deprecated since version 1.17
	*/
	public function getAvailableDigitalPackageFulfillmentActions($orderId, $digitalPackageId)
	{
		$mozuClient = DigitalPackageClient::getAvailableDigitalPackageFulfillmentActionsClient($orderId, $digitalPackageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $digitalPackageId This parameter supplies package ID to get fulfillment actions for the digital package.
	* @param string $orderId This parameter provides the unique identifier of the order on which to get a list of available actions.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAvailableDigitalPackageFulfillmentActionsAsync($orderId, $digitalPackageId)
	{
		$mozuClient = DigitalPackageClient::getAvailableDigitalPackageFulfillmentActionsClient($orderId, $digitalPackageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $digitalPackageId This parameter provides the digital package Id.
	* @param string $orderId This parameter provides the unique identifier of the order with which to associate the digital package.
	* @param string $responseFields 
	* @return DigitalPackage 
	* @deprecated deprecated since version 1.17
	*/
	public function getDigitalPackage($orderId, $digitalPackageId, $responseFields =  null)
	{
		$mozuClient = DigitalPackageClient::getDigitalPackageClient($orderId, $digitalPackageId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $digitalPackageId This parameter provides the digital package Id.
	* @param string $orderId This parameter provides the unique identifier of the order with which to associate the digital package.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getDigitalPackageAsync($orderId, $digitalPackageId, $responseFields =  null)
	{
		$mozuClient = DigitalPackageClient::getDigitalPackageClient($orderId, $digitalPackageId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId The orderID is a required paramter for the digitalpackages operation. The orderId is a unique identifier of the order with which to associate the digital package.
	* @param string $responseFields 
	* @param DigitalPackage $digitalPackage The digitalPackage parameter is a required parameter for the CreateDigitalPackages operation. The digitalPackage is the digital package to create and add to the order.
	* @return DigitalPackage 
	* @deprecated deprecated since version 1.17
	*/
	public function createDigitalPackage($digitalPackage, $orderId, $responseFields =  null)
	{
		$mozuClient = DigitalPackageClient::createDigitalPackageClient($digitalPackage, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId The orderID is a required paramter for the digitalpackages operation. The orderId is a unique identifier of the order with which to associate the digital package.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createDigitalPackageAsync($digitalPackage, $orderId, $responseFields =  null)
	{
		$mozuClient = DigitalPackageClient::createDigitalPackageClient($digitalPackage, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $digitalPackageId This parameter specifies the digital package to update in the order.
	* @param string $orderId This parameter provides the unique identifier of the order with which to associate the digital package.
	* @param string $responseFields 
	* @param DigitalPackage $digitalPackage This parameter provides the package content to update in the order.
	* @return DigitalPackage 
	* @deprecated deprecated since version 1.17
	*/
	public function updateDigitalPackage($digitalPackage, $orderId, $digitalPackageId, $responseFields =  null)
	{
		$mozuClient = DigitalPackageClient::updateDigitalPackageClient($digitalPackage, $orderId, $digitalPackageId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $digitalPackageId This parameter specifies the digital package to update in the order.
	* @param string $orderId This parameter provides the unique identifier of the order with which to associate the digital package.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateDigitalPackageAsync($digitalPackage, $orderId, $digitalPackageId, $responseFields =  null)
	{
		$mozuClient = DigitalPackageClient::updateDigitalPackageClient($digitalPackage, $orderId, $digitalPackageId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $digitalPackageId The digitalPackage ID is unique package ID to update on the order.
	* @param string $orderId The orderId is unique identifier of the order with which to associate the package.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteDigitalPackage($orderId, $digitalPackageId)
	{
		$mozuClient = DigitalPackageClient::deleteDigitalPackageClient($orderId, $digitalPackageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $digitalPackageId The digitalPackage ID is unique package ID to update on the order.
	* @param string $orderId The orderId is unique identifier of the order with which to associate the package.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteDigitalPackageAsync($orderId, $digitalPackageId)
	{
		$mozuClient = DigitalPackageClient::deleteDigitalPackageClient($orderId, $digitalPackageId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

