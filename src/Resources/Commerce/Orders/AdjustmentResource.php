<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Orders;

use Mozu\Api\Clients\Commerce\Orders\AdjustmentClient;
use Mozu\Api\ApiContext;


/**
* Use this subresource to manage ad-hoc order level price adjustments.
*/
class AdjustmentResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $orderId 
	* @param string $responseFields 
	* @param string $updateMode 
	* @param string $version 
	* @param Adjustment $adjustment 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function applyHandlingAdjustment($adjustment, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = AdjustmentClient::applyHandlingAdjustmentClient($adjustment, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId 
	* @param string $responseFields 
	* @param string $updateMode 
	* @param string $version 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function applyHandlingAdjustmentAsync($adjustment, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = AdjustmentClient::applyHandlingAdjustmentClient($adjustment, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the shipping adjustment.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to apply the shipping adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @param Adjustment $adjustment Properties of the shipping adjustment to apply to the order.
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function applyShippingAdjustment($adjustment, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = AdjustmentClient::applyShippingAdjustmentClient($adjustment, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the shipping adjustment.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to apply the shipping adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function applyShippingAdjustmentAsync($adjustment, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = AdjustmentClient::applyShippingAdjustmentClient($adjustment, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order for which to apply the adjustment.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to apply the adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @param Adjustment $adjustment Properties of the price adjustment to apply to the order.
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function applyAdjustment($adjustment, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = AdjustmentClient::applyAdjustmentClient($adjustment, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order for which to apply the adjustment.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to apply the adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function applyAdjustmentAsync($adjustment, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = AdjustmentClient::applyAdjustmentClient($adjustment, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @param string $updateMode 
	* @param string $version 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function removeHandlingAdjustment($orderId, $updateMode =  null, $version =  null)
	{
		$mozuClient = AdjustmentClient::removeHandlingAdjustmentClient($orderId, $updateMode, $version);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId 
	* @param string $updateMode 
	* @param string $version 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function removeHandlingAdjustmentAsync($orderId, $updateMode =  null, $version =  null)
	{
		$mozuClient = AdjustmentClient::removeHandlingAdjustmentClient($orderId, $updateMode, $version);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order with the applied shipping adjustment.
	* @param string $updateMode Specifies whether to remove the shipping adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function removeShippingAdjustment($orderId, $updateMode =  null, $version =  null)
	{
		$mozuClient = AdjustmentClient::removeShippingAdjustmentClient($orderId, $updateMode, $version);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order with the applied shipping adjustment.
	* @param string $updateMode Specifies whether to remove the shipping adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function removeShippingAdjustmentAsync($orderId, $updateMode =  null, $version =  null)
	{
		$mozuClient = AdjustmentClient::removeShippingAdjustmentClient($orderId, $updateMode, $version);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order for which to delete the adjustment.
	* @param string $updateMode Specifies whether to remove the adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function removeAdjustment($orderId, $updateMode =  null, $version =  null)
	{
		$mozuClient = AdjustmentClient::removeAdjustmentClient($orderId, $updateMode, $version);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order for which to delete the adjustment.
	* @param string $updateMode Specifies whether to remove the adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function removeAdjustmentAsync($orderId, $updateMode =  null, $version =  null)
	{
		$mozuClient = AdjustmentClient::removeAdjustmentClient($orderId, $updateMode, $version);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

