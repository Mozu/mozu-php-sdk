<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Orders;

use Mozu\Api\Clients\Commerce\Orders\PickupClient;
use Mozu\Api\ApiContext;


/**
* Use the Pickups resource to organize items submitted in an order into pickups that enable the shopper to fulfill the order items using the in-store pickup method.
*/
class PickupResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the pickup.
	* @param string $pickupId Unique identifier of the pickup for which to retrieve available actions.
	* @return array|string 
	* @deprecated deprecated since version 1.17
	*/
	public function getAvailablePickupFulfillmentActions($orderId, $pickupId)
	{
		$mozuClient = PickupClient::getAvailablePickupFulfillmentActionsClient($orderId, $pickupId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the pickup.
	* @param string $pickupId Unique identifier of the pickup for which to retrieve available actions.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAvailablePickupFulfillmentActionsAsync($orderId, $pickupId)
	{
		$mozuClient = PickupClient::getAvailablePickupFulfillmentActionsClient($orderId, $pickupId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the pickup.
	* @param string $pickupId Unique identifier of the pickup to retrieve.
	* @param string $responseFields 
	* @return Pickup 
	* @deprecated deprecated since version 1.17
	*/
	public function getPickup($orderId, $pickupId, $responseFields =  null)
	{
		$mozuClient = PickupClient::getPickupClient($orderId, $pickupId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the pickup.
	* @param string $pickupId Unique identifier of the pickup to retrieve.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getPickupAsync($orderId, $pickupId, $responseFields =  null)
	{
		$mozuClient = PickupClient::getPickupClient($orderId, $pickupId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields 
	* @param Pickup $pickup Properties of the in-store pickup to create.
	* @return Pickup 
	* @deprecated deprecated since version 1.17
	*/
	public function createPickup($pickup, $orderId, $responseFields =  null)
	{
		$mozuClient = PickupClient::createPickupClient($pickup, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createPickupAsync($pickup, $orderId, $responseFields =  null)
	{
		$mozuClient = PickupClient::createPickupClient($pickup, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the in-store pickup.
	* @param string $pickupId Unique identifier of the pickup to update.
	* @param string $responseFields 
	* @param Pickup $pickup Properties of the in-store pickup to update.
	* @return Pickup 
	* @deprecated deprecated since version 1.17
	*/
	public function updatePickup($pickup, $orderId, $pickupId, $responseFields =  null)
	{
		$mozuClient = PickupClient::updatePickupClient($pickup, $orderId, $pickupId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the in-store pickup.
	* @param string $pickupId Unique identifier of the pickup to update.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updatePickupAsync($pickup, $orderId, $pickupId, $responseFields =  null)
	{
		$mozuClient = PickupClient::updatePickupClient($pickup, $orderId, $pickupId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the pickup.
	* @param string $pickupId Unique identifier of the pickup to remove.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deletePickup($orderId, $pickupId)
	{
		$mozuClient = PickupClient::deletePickupClient($orderId, $pickupId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the pickup.
	* @param string $pickupId Unique identifier of the pickup to remove.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deletePickupAsync($orderId, $pickupId)
	{
		$mozuClient = PickupClient::deletePickupClient($orderId, $pickupId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

