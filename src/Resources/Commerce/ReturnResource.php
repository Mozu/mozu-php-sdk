<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce;

use Mozu\Api\Clients\Commerce\ReturnClient;
use Mozu\Api\ApiContext;


/**
* Use the Returns resource to manage returned items that were previously fufilled. Returns can include any number of items associated with an original Mozu order. Each return must either be associated with an original order or a product definition to represent each returned item.
*/
class ReturnResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return ReturnCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getReturns($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getReturnsClient($startIndex, $pageSize, $sortBy, $filter, $q, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getReturnsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getReturnsClient($startIndex, $pageSize, $sortBy, $filter, $q, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $returnId Unique identifier of the return for which to retrieve available actions.
	* @return array|string 
	* @deprecated deprecated since version 1.17
	*/
	public function getAvailableReturnActions($returnId)
	{
		$mozuClient = ReturnClient::getAvailableReturnActionsClient($returnId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $returnId Unique identifier of the return for which to retrieve available actions.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAvailableReturnActionsAsync($returnId)
	{
		$mozuClient = ReturnClient::getAvailableReturnActionsClient($returnId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @param string $returnItemId 
	* @return ReturnItem 
	* @deprecated deprecated since version 1.17
	*/
	public function getReturnItem($returnId, $returnItemId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getReturnItemClient($returnId, $returnItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @param string $returnItemId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getReturnItemAsync($returnId, $returnItemId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getReturnItemClient($returnId, $returnItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @return ReturnItemCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getReturnItems($returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getReturnItemsClient($returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getReturnItemsAsync($returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getReturnItemsClient($returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $paymentId Unique identifier of the payment for which to perform the action.
	* @param string $returnId Unique identifier of the return associated with the payment.
	* @return array|string 
	* @deprecated deprecated since version 1.17
	*/
	public function getAvailablePaymentActionsForReturn($returnId, $paymentId)
	{
		$mozuClient = ReturnClient::getAvailablePaymentActionsForReturnClient($returnId, $paymentId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $paymentId Unique identifier of the payment for which to perform the action.
	* @param string $returnId Unique identifier of the return associated with the payment.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAvailablePaymentActionsForReturnAsync($returnId, $paymentId)
	{
		$mozuClient = ReturnClient::getAvailablePaymentActionsForReturnClient($returnId, $paymentId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $paymentId Unique identifier of the return payment to retrieve.
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return associated with the payment.
	* @return Payment 
	* @deprecated deprecated since version 1.17
	*/
	public function getPayment($returnId, $paymentId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getPaymentClient($returnId, $paymentId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $paymentId Unique identifier of the return payment to retrieve.
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return associated with the payment.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getPaymentAsync($returnId, $paymentId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getPaymentClient($returnId, $paymentId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId Returns the details of the refund payment associated with the return specified in the request.
	* @return PaymentCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getPayments($returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getPaymentsClient($returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId Returns the details of the refund payment associated with the return specified in the request.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getPaymentsAsync($returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getPaymentsClient($returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId Returns the properties of the return specified in the request as well as system-supplied information.
	* @return Return 
	* @deprecated deprecated since version 1.17
	*/
	public function getReturn($returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getReturnClient($returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId Returns the properties of the return specified in the request as well as system-supplied information.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getReturnAsync($returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::getReturnClient($returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @return ReasonCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getReasons($responseFields =  null)
	{
		$mozuClient = ReturnClient::getReasonsClient($responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getReasonsAsync($responseFields =  null)
	{
		$mozuClient = ReturnClient::getReasonsClient($responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param Return $ret Wrapper for the properties of the return to create.
	* @return Return 
	* @deprecated deprecated since version 1.17
	*/
	public function createReturn($ret, $responseFields =  null)
	{
		$mozuClient = ReturnClient::createReturnClient($ret, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createReturnAsync($ret, $responseFields =  null)
	{
		$mozuClient = ReturnClient::createReturnClient($ret, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @param ReturnItem $returnItem 
	* @return Return 
	* @deprecated deprecated since version 1.17
	*/
	public function createReturnItem($returnItem, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::createReturnItemClient($returnItem, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createReturnItemAsync($returnItem, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::createReturnItemClient($returnItem, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $paymentId Unique identifier of the return payment to update.
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return associated with the refund payment.
	* @param PaymentAction $action The payment action to perform for the refund payment.
	* @return Return 
	* @deprecated deprecated since version 1.17
	*/
	public function performPaymentActionForReturn($action, $returnId, $paymentId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::performPaymentActionForReturnClient($action, $returnId, $paymentId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $paymentId Unique identifier of the return payment to update.
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return associated with the refund payment.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function performPaymentActionForReturnAsync($action, $returnId, $paymentId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::performPaymentActionForReturnClient($action, $returnId, $paymentId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return associated with the payment action.
	* @param PaymentAction $action The payment action to perform for the customer return.
	* @return Return 
	* @deprecated deprecated since version 1.17
	*/
	public function createPaymentActionForReturn($action, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::createPaymentActionForReturnClient($action, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return associated with the payment action.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createPaymentActionForReturnAsync($action, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::createPaymentActionForReturnClient($action, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @param array|RestockableReturnItem $returnItems 
	* @return Return 
	* @deprecated deprecated since version 1.17
	*/
	public function restockReturnItems($returnItems, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::restockReturnItemsClient($returnItems, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function restockReturnItemsAsync($returnItems, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::restockReturnItemsClient($returnItems, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @param array|ReturnItemSpecifier $itemQuantities 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function createReturnShippingOrder($itemQuantities, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::createReturnShippingOrderClient($itemQuantities, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createReturnShippingOrderAsync($itemQuantities, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::createReturnShippingOrderClient($itemQuantities, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param ReturnAction $action The name of the return action to perform, such as "Reject" or "Authorize".
	* @return ReturnCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function performReturnActions($action, $responseFields =  null)
	{
		$mozuClient = ReturnClient::performReturnActionsClient($action, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function performReturnActionsAsync($action, $responseFields =  null)
	{
		$mozuClient = ReturnClient::performReturnActionsClient($action, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return.
	* @param Return $ret Wrapper for the array of properties to update for the return.
	* @return Return 
	* @deprecated deprecated since version 1.17
	*/
	public function updateReturn($ret, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::updateReturnClient($ret, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateReturnAsync($ret, $returnId, $responseFields =  null)
	{
		$mozuClient = ReturnClient::updateReturnClient($ret, $returnId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param ReturnAction $action 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function resendReturnEmail($action)
	{
		$mozuClient = ReturnClient::resendReturnEmailClient($action);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function resendReturnEmailAsync($action)
	{
		$mozuClient = ReturnClient::resendReturnEmailClient($action);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $returnId 
	* @param string $returnItemId 
	* @return Return 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteOrderItem($returnId, $returnItemId)
	{
		$mozuClient = ReturnClient::deleteOrderItemClient($returnId, $returnItemId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $returnId 
	* @param string $returnItemId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteOrderItemAsync($returnId, $returnItemId)
	{
		$mozuClient = ReturnClient::deleteOrderItemClient($returnId, $returnItemId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $returnId Unique identifier of the return to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteReturn($returnId)
	{
		$mozuClient = ReturnClient::deleteReturnClient($returnId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $returnId Unique identifier of the return to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteReturnAsync($returnId)
	{
		$mozuClient = ReturnClient::deleteReturnClient($returnId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

