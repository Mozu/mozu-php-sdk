<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce;

use Mozu\Api\Clients\Commerce\OrderClient;
use Mozu\Api\ApiContext;


/**
* Use the Orders resource to manage all components of order processing, payment, and fulfillment.
*/
class OrderResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter an order's search results by any of its properties, including status, contact information, or total. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=Status+eq+Submitted"
	* @param bool $includeBin 
	* @param string $mode 
	* @param int $pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. Default value: 20. Max value: 200.
	* @param string $q A list of order search terms to use in the query when searching across order number and the name or email of the billing contact. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields 
	* @param string $sortBy The element to sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts 'asc' or 'asc' or descending order (z-a) which accepts 'desc' or 'desc'. The sortBy parameter follows an available property. For examp
	* @param int $startIndex 
	* @return OrderCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getOrders($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $includeBin =  null, $mode =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::getOrdersClient($startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $includeBin, $mode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter an order's search results by any of its properties, including status, contact information, or total. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=Status+eq+Submitted"
	* @param bool $includeBin 
	* @param string $mode 
	* @param int $pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. Default value: 20. Max value: 200.
	* @param string $q A list of order search terms to use in the query when searching across order number and the name or email of the billing contact. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields 
	* @param string $sortBy The element to sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts 'asc' or 'asc' or descending order (z-a) which accepts 'desc' or 'desc'. The sortBy parameter follows an available property. For examp
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getOrdersAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $includeBin =  null, $mode =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::getOrdersClient($startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $includeBin, $mode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the available order actions to get.
	* @return array|string 
	* @deprecated deprecated since version 1.17
	*/
	public function getAvailableActions($orderId)
	{
		$mozuClient = OrderClient::getAvailableActionsClient($orderId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the available order actions to get.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAvailableActionsAsync($orderId)
	{
		$mozuClient = OrderClient::getAvailableActionsClient($orderId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order to retrieve.
	* @return array|TaxableOrder 
	* @deprecated deprecated since version 1.17
	*/
	public function getTaxableOrders($orderId)
	{
		$mozuClient = OrderClient::getTaxableOrdersClient($orderId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order to retrieve.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getTaxableOrdersAsync($orderId)
	{
		$mozuClient = OrderClient::getTaxableOrdersClient($orderId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $draft If true, retrieve the draft version of the order, which might include uncommitted changes to the order or its components.
	* @param bool $includeBin 
	* @param string $mode 
	* @param string $orderId Unique identifier of the order details to get.
	* @param string $responseFields 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function getOrder($orderId, $draft =  null, $includeBin =  null, $mode =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::getOrderClient($orderId, $draft, $includeBin, $mode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $draft If true, retrieve the draft version of the order, which might include uncommitted changes to the order or its components.
	* @param bool $includeBin 
	* @param string $mode 
	* @param string $orderId Unique identifier of the order details to get.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getOrderAsync($orderId, $draft =  null, $includeBin =  null, $mode =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::getOrderClient($orderId, $draft, $includeBin, $mode, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID.
	* @param string $responseFields 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function createOrderFromCart($cartId, $responseFields =  null)
	{
		$mozuClient = OrderClient::createOrderFromCartClient($cartId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createOrderFromCartAsync($cartId, $responseFields =  null)
	{
		$mozuClient = OrderClient::createOrderFromCartClient($cartId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param Order $order Properties of the order to create and submit.
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function createOrder($order, $responseFields =  null)
	{
		$mozuClient = OrderClient::createOrderClient($order, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createOrderAsync($order, $responseFields =  null)
	{
		$mozuClient = OrderClient::createOrderClient($order, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields 
	* @param OrderAction $action The action to perform for the order.
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function performOrderAction($action, $orderId, $responseFields =  null)
	{
		$mozuClient = OrderClient::performOrderActionClient($action, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function performOrderActionAsync($action, $orderId, $responseFields =  null)
	{
		$mozuClient = OrderClient::performOrderActionClient($action, $orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $refreshShipping 
	* @param string $responseFields 
	* @param Order $order 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function priceOrder($order, $refreshShipping, $responseFields =  null)
	{
		$mozuClient = OrderClient::priceOrderClient($order, $refreshShipping, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $refreshShipping 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function priceOrderAsync($order, $refreshShipping, $responseFields =  null)
	{
		$mozuClient = OrderClient::priceOrderClient($order, $refreshShipping, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $digitalWalletType 
	* @param string $orderId 
	* @param string $responseFields 
	* @param DigitalWallet $digitalWallet 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function processDigitalWallet($digitalWallet, $orderId, $digitalWalletType, $responseFields =  null)
	{
		$mozuClient = OrderClient::processDigitalWalletClient($digitalWallet, $orderId, $digitalWalletType, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $digitalWalletType 
	* @param string $orderId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function processDigitalWalletAsync($digitalWallet, $orderId, $digitalWalletType, $responseFields =  null)
	{
		$mozuClient = OrderClient::processDigitalWalletClient($digitalWallet, $orderId, $digitalWalletType, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $discountId Unique identifier of the discount. System-supplied and read only.
	* @param string $orderId Unique identifier of the order discount. System-supplied and read only.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to modify the discount by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @param AppliedDiscount $discount Properties of the order discount to update.
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function updateOrderDiscount($discount, $orderId, $discountId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::updateOrderDiscountClient($discount, $orderId, $discountId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $discountId Unique identifier of the discount. System-supplied and read only.
	* @param string $orderId Unique identifier of the order discount. System-supplied and read only.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to modify the discount by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateOrderDiscountAsync($discount, $orderId, $discountId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::updateOrderDiscountClient($discount, $orderId, $discountId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the draft to delete.
	* @param string $version If applicable, the version of the order draft to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteOrderDraft($orderId, $version =  null)
	{
		$mozuClient = OrderClient::deleteOrderDraftClient($orderId, $version);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the draft to delete.
	* @param string $version If applicable, the version of the order draft to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteOrderDraftAsync($orderId, $version =  null)
	{
		$mozuClient = OrderClient::deleteOrderDraftClient($orderId, $version);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @param OrderAction $action 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function resendOrderConfirmationEmail($action, $orderId)
	{
		$mozuClient = OrderClient::resendOrderConfirmationEmailClient($action, $orderId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function resendOrderConfirmationEmailAsync($action, $orderId)
	{
		$mozuClient = OrderClient::resendOrderConfirmationEmailClient($action, $orderId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @param string $responseFields 
	* @param string $updateMode 
	* @param string $version 
	* @param string $priceListCode 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function changeOrderPriceList($priceListCode, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::changeOrderPriceListClient($priceListCode, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId 
	* @param string $responseFields 
	* @param string $updateMode 
	* @param string $version 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function changeOrderPriceListAsync($priceListCode, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::changeOrderPriceListClient($priceListCode, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields 
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function changeOrderUserId($orderId, $responseFields =  null)
	{
		$mozuClient = OrderClient::changeOrderUserIdClient($orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function changeOrderUserIdAsync($orderId, $responseFields =  null)
	{
		$mozuClient = OrderClient::changeOrderUserIdClient($orderId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order to update.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to update the original order, update the order in draft mode, or update the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @param Order $order The properties of the order to update.
	* @return Order 
	* @deprecated deprecated since version 1.17
	*/
	public function updateOrder($order, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::updateOrderClient($order, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $orderId Unique identifier of the order to update.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to update the original order, update the order in draft mode, or update the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateOrderAsync($order, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$mozuClient = OrderClient::updateOrderClient($order, $orderId, $updateMode, $version, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

