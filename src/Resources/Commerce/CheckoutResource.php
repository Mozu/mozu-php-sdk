<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce;

use Mozu\Api\Clients\Commerce\CheckoutClient;
use Mozu\Api\ApiContext;


/**
* 
*/
class CheckoutResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CheckoutCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getCheckouts($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::getCheckoutsClient($startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getCheckoutsAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::getCheckoutsClient($startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $checkoutId 
	* @return array|string 
	* @deprecated deprecated since version 1.17
	*/
	public function getAvailableActions($checkoutId)
	{
		$mozuClient = CheckoutClient::getAvailableActionsClient($checkoutId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $checkoutId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAvailableActionsAsync($checkoutId)
	{
		$mozuClient = CheckoutClient::getAvailableActionsClient($checkoutId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $checkoutId 
	* @return array|CheckoutGroupRates 
	* @deprecated deprecated since version 1.17
	*/
	public function getAvailableShippingMethods($checkoutId)
	{
		$mozuClient = CheckoutClient::getAvailableShippingMethodsClient($checkoutId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $checkoutId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getAvailableShippingMethodsAsync($checkoutId)
	{
		$mozuClient = CheckoutClient::getAvailableShippingMethodsClient($checkoutId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @return Checkout 
	* @deprecated deprecated since version 1.17
	*/
	public function getCheckout($checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::getCheckoutClient($checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getCheckoutAsync($checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::getCheckoutClient($checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $cartId 
	* @param string $responseFields 
	* @return Checkout 
	* @deprecated deprecated since version 1.17
	*/
	public function createCheckoutFromCart($cartId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::createCheckoutFromCartClient($cartId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $cartId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createCheckoutFromCartAsync($cartId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::createCheckoutFromCartClient($cartId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @param CheckoutAction $action 
	* @return Checkout 
	* @deprecated deprecated since version 1.17
	*/
	public function performCheckoutAction($action, $checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::performCheckoutActionClient($action, $checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function performCheckoutActionAsync($action, $checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::performCheckoutActionClient($action, $checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $checkoutId 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function resendCheckoutConfirmationEmail($checkoutId)
	{
		$mozuClient = CheckoutClient::resendCheckoutConfirmationEmailClient($checkoutId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $checkoutId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function resendCheckoutConfirmationEmailAsync($checkoutId)
	{
		$mozuClient = CheckoutClient::resendCheckoutConfirmationEmailClient($checkoutId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @param array|CheckoutGroupShippingMethod $groupShippingMethods 
	* @return Checkout 
	* @deprecated deprecated since version 1.17
	*/
	public function setShippingMethods($groupShippingMethods, $checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::setShippingMethodsClient($groupShippingMethods, $checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function setShippingMethodsAsync($groupShippingMethods, $checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::setShippingMethodsClient($groupShippingMethods, $checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @param Checkout $checkout 
	* @return Checkout 
	* @deprecated deprecated since version 1.17
	*/
	public function updateCheckout($checkout, $checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::updateCheckoutClient($checkout, $checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateCheckoutAsync($checkout, $checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::updateCheckoutClient($checkout, $checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $checkoutId 
	* @param string $digitalWalletType 
	* @param string $responseFields 
	* @param DigitalWallet $digitalWallet 
	* @return Checkout 
	* @deprecated deprecated since version 1.17
	*/
	public function processDigitalWallet($digitalWallet, $checkoutId, $digitalWalletType, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::processDigitalWalletClient($digitalWallet, $checkoutId, $digitalWalletType, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $checkoutId 
	* @param string $digitalWalletType 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function processDigitalWalletAsync($digitalWallet, $checkoutId, $digitalWalletType, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::processDigitalWalletClient($digitalWallet, $checkoutId, $digitalWalletType, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @param string $priceListCode 
	* @return Checkout 
	* @deprecated deprecated since version 1.17
	*/
	public function changeCheckoutPriceList($priceListCode, $checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::changeCheckoutPriceListClient($priceListCode, $checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $checkoutId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function changeCheckoutPriceListAsync($priceListCode, $checkoutId, $responseFields =  null)
	{
		$mozuClient = CheckoutClient::changeCheckoutPriceListClient($priceListCode, $checkoutId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

