<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Carts;

use Mozu\Api\Clients\Commerce\Carts\CartItemClient;
use Mozu\Api\ApiContext;


/**
* Use the Cart Items subresource to manage a collection of items in an active shopping cart.
*/
class CartItemResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $cartItemId Identifier of the cart item to retrieve.
	* @param string $responseFields 
	* @return CartItem 
	* @deprecated deprecated since version 1.17
	*/
	public function getCartItem($cartItemId, $responseFields =  null)
	{
		$mozuClient = CartItemClient::getCartItemClient($cartItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $cartItemId Identifier of the cart item to retrieve.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getCartItemAsync($cartItemId, $responseFields =  null)
	{
		$mozuClient = CartItemClient::getCartItemClient($cartItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @return CartItemCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getCartItems($responseFields =  null)
	{
		$mozuClient = CartItemClient::getCartItemsClient($responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getCartItemsAsync($responseFields =  null)
	{
		$mozuClient = CartItemClient::getCartItemsClient($responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param bool $throwErrorOnInvalidItems 
	* @param array|CartItem $cartItems 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function addItemsToCart($cartItems, $throwErrorOnInvalidItems =  null)
	{
		$mozuClient = CartItemClient::addItemsToCartClient($cartItems, $throwErrorOnInvalidItems);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param bool $throwErrorOnInvalidItems 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addItemsToCartAsync($cartItems, $throwErrorOnInvalidItems =  null)
	{
		$mozuClient = CartItemClient::addItemsToCartClient($cartItems, $throwErrorOnInvalidItems);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param CartItem $cartItem All properties of the new cart item. The product code is required.
	* @return CartItem 
	* @deprecated deprecated since version 1.17
	*/
	public function addItemToCart($cartItem, $responseFields =  null)
	{
		$mozuClient = CartItemClient::addItemToCartClient($cartItem, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function addItemToCartAsync($cartItem, $responseFields =  null)
	{
		$mozuClient = CartItemClient::addItemToCartClient($cartItem, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $cartItemId Identifier of the cart item to update quantity.
	* @param int $quantity The number of cart items in the shopper's active cart.
	* @param string $responseFields 
	* @return CartItem 
	* @deprecated deprecated since version 1.17
	*/
	public function updateCartItemQuantity($cartItemId, $quantity, $responseFields =  null)
	{
		$mozuClient = CartItemClient::updateCartItemQuantityClient($cartItemId, $quantity, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $cartItemId Identifier of the cart item to update quantity.
	* @param int $quantity The number of cart items in the shopper's active cart.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateCartItemQuantityAsync($cartItemId, $quantity, $responseFields =  null)
	{
		$mozuClient = CartItemClient::updateCartItemQuantityClient($cartItemId, $quantity, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $cartItemId Identifier of the cart item to update.
	* @param string $responseFields 
	* @param CartItem $cartItem The properties of the cart item to update.
	* @return CartItem 
	* @deprecated deprecated since version 1.17
	*/
	public function updateCartItem($cartItem, $cartItemId, $responseFields =  null)
	{
		$mozuClient = CartItemClient::updateCartItemClient($cartItem, $cartItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $cartItemId Identifier of the cart item to update.
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateCartItemAsync($cartItem, $cartItemId, $responseFields =  null)
	{
		$mozuClient = CartItemClient::updateCartItemClient($cartItem, $cartItemId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @return Cart 
	* @deprecated deprecated since version 1.17
	*/
	public function removeAllCartItems()
	{
		$mozuClient = CartItemClient::removeAllCartItemsClient();
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function removeAllCartItemsAsync()
	{
		$mozuClient = CartItemClient::removeAllCartItemsClient();
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $cartItemId Identifier of the cart item to delete.
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteCartItem($cartItemId)
	{
		$mozuClient = CartItemClient::deleteCartItemClient($cartItemId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $cartItemId Identifier of the cart item to delete.
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteCartItemAsync($cartItemId)
	{
		$mozuClient = CartItemClient::deleteCartItemClient($cartItemId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

