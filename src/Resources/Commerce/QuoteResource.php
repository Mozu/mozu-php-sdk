<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce;

use Mozu\Api\Clients\Commerce\QuoteClient;
use Mozu\Api\ApiContext;


/**
* 
*/
class QuoteResource {

		private $apiContext;
			
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	



	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return QuoteCollection 
	* @deprecated deprecated since version 1.17
	*/
	public function getQuotes($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $responseFields =  null)
	{
		$mozuClient = QuoteClient::getQuotesClient($startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize 
	* @param string $q 
	* @param int $qLimit 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getQuotesAsync($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $responseFields =  null)
	{
		$mozuClient = QuoteClient::getQuotesClient($startIndex, $pageSize, $sortBy, $filter, $q, $qLimit, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $quoteId 
	* @param string $responseFields 
	* @return Quote 
	* @deprecated deprecated since version 1.17
	*/
	public function getQuote($quoteId, $responseFields =  null)
	{
		$mozuClient = QuoteClient::getQuoteClient($quoteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $quoteId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getQuoteAsync($quoteId, $responseFields =  null)
	{
		$mozuClient = QuoteClient::getQuoteClient($quoteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param int $customerAccountId 
	* @param string $quoteName 
	* @param string $responseFields 
	* @return Quote 
	* @deprecated deprecated since version 1.17
	*/
	public function getQuoteByName($customerAccountId, $quoteName, $responseFields =  null)
	{
		$mozuClient = QuoteClient::getQuoteByNameClient($customerAccountId, $quoteName, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param int $customerAccountId 
	* @param string $quoteName 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function getQuoteByNameAsync($customerAccountId, $quoteName, $responseFields =  null)
	{
		$mozuClient = QuoteClient::getQuoteByNameClient($customerAccountId, $quoteName, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param Quote $quote 
	* @return Quote 
	* @deprecated deprecated since version 1.17
	*/
	public function createQuote($quote, $responseFields =  null)
	{
		$mozuClient = QuoteClient::createQuoteClient($quote, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function createQuoteAsync($quote, $responseFields =  null)
	{
		$mozuClient = QuoteClient::createQuoteClient($quote, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $quoteId 
	* @param string $responseFields 
	* @param Quote $quote 
	* @return Quote 
	* @deprecated deprecated since version 1.17
	*/
	public function updateQuote($quote, $quoteId, $responseFields =  null)
	{
		$mozuClient = QuoteClient::updateQuoteClient($quote, $quoteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $quoteId 
	* @param string $responseFields 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function updateQuoteAsync($quote, $quoteId, $responseFields =  null)
	{
		$mozuClient = QuoteClient::updateQuoteClient($quote, $quoteId, $responseFields);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	/**
	* 
	*
	* @param string $quoteId 
	* @return Stream 
	* @deprecated deprecated since version 1.17
	*/
	public function deleteQuote($quoteId)
	{
		$mozuClient = QuoteClient::deleteQuoteClient($quoteId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		$mozuClient->execute();
		return $mozuClient->getResult();

	}
	
/**
	* 
	*
	* @param string $quoteId 
	* @return Promise - use $promise->then(sucessfn, errorfn). successFn is passed Mozu\Api\MozuResult. errorFn is passed Mozu\Api\ApiException
	*/
	public function deleteQuoteAsync($quoteId)
	{
		$mozuClient = QuoteClient::deleteQuoteClient($quoteId);
		$mozuClient = $mozuClient->withContext($this->apiContext);
		return $mozuClient->executeAsync();

	}
	
	
}

?>

