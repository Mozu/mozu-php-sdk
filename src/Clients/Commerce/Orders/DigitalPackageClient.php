<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Orders;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Orders\DigitalPackageUrl;


/**
* A digital package is a package in a digital format.
*/
class DigitalPackageClient {

	/**
	* 
	*
	* @param string $digitalPackageId This parameter supplies package ID to get fulfillment actions for the digital package.
	* @param string $orderId This parameter provides the unique identifier of the order on which to get a list of available actions.
	* @return MozuClient
	*/
	public static function getAvailableDigitalPackageFulfillmentActionsClient($orderId, $digitalPackageId)
	{
		$url = DigitalPackageUrl::getAvailableDigitalPackageFulfillmentActionsUrl($digitalPackageId, $orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $digitalPackageId This parameter provides the digital package Id.
	* @param string $orderId This parameter provides the unique identifier of the order with which to associate the digital package.
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function getDigitalPackageClient($orderId, $digitalPackageId, $responseFields =  null)
	{
		$url = DigitalPackageUrl::getDigitalPackageUrl($digitalPackageId, $orderId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId The orderID is a required paramter for the digitalpackages operation. The orderId is a unique identifier of the order with which to associate the digital package.
	* @param string $responseFields 
	* @param DigitalPackage $digitalPackage The digitalPackage parameter is a required parameter for the CreateDigitalPackages operation. The digitalPackage is the digital package to create and add to the order.
	* @return MozuClient
	*/
	public static function createDigitalPackageClient($digitalPackage, $orderId, $responseFields =  null)
	{
		$url = DigitalPackageUrl::createDigitalPackageUrl($orderId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($digitalPackage);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $digitalPackageId This parameter specifies the digital package to update in the order.
	* @param string $orderId This parameter provides the unique identifier of the order with which to associate the digital package.
	* @param string $responseFields 
	* @param DigitalPackage $digitalPackage This parameter provides the package content to update in the order.
	* @return MozuClient
	*/
	public static function updateDigitalPackageClient($digitalPackage, $orderId, $digitalPackageId, $responseFields =  null)
	{
		$url = DigitalPackageUrl::updateDigitalPackageUrl($digitalPackageId, $orderId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($digitalPackage);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $digitalPackageId The digitalPackage ID is unique package ID to update on the order.
	* @param string $orderId The orderId is unique identifier of the order with which to associate the package.
	* @return MozuClient
	*/
	public static function deleteDigitalPackageClient($orderId, $digitalPackageId)
	{
		$url = DigitalPackageUrl::deleteDigitalPackageUrl($digitalPackageId, $orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>

