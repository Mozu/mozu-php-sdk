<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Returns;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Returns\PackageUrl;


/**
* Use the Return Packages subresource to manage physical packages used to ship return replacement items.
*/
class PackageClient {

	/**
	* 
	*
	* @param string $packageId Unique identifier of the return replacement package for which to retrieve the label.
	* @param bool $returnAsBase64Png 
	* @param string $returnId Unique identifier of the return associated with the replacement package label to retrieve.
	* @return MozuClient
	*/
	public static function getPackageLabelClient($returnId, $packageId, $returnAsBase64Png =  null)
	{
		$url = PackageUrl::getPackageLabelUrl($packageId, $returnAsBase64Png, $returnId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $packageId Unique identifier of the return replacement package to retrieve.
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return associated with the replacement package to retrieve.
	* @return MozuClient
	*/
	public static function getPackageClient($returnId, $packageId, $responseFields =  null)
	{
		$url = PackageUrl::getPackageUrl($packageId, $responseFields, $returnId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return for which to create a replacement package.
	* @param Package $package Properties of the physical package for a return replacement.
	* @return MozuClient
	*/
	public static function createPackageClient($pkg, $returnId, $responseFields =  null)
	{
		$url = PackageUrl::createPackageUrl($responseFields, $returnId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($pkg);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $packageId Unique identifier of the return replacement package to update.
	* @param string $responseFields 
	* @param string $returnId Unique identifier of the return associated with the replacement package to update.
	* @param Package $package Properties of the return replacement package to update.
	* @return MozuClient
	*/
	public static function updatePackageClient($pkg, $returnId, $packageId, $responseFields =  null)
	{
		$url = PackageUrl::updatePackageUrl($packageId, $responseFields, $returnId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($pkg);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $packageId Unique identifier of the return replacement package to delete.
	* @param string $returnId Unique identifier of the return associated with the replacement package to delete.
	* @return MozuClient
	*/
	public static function deletePackageClient($returnId, $packageId)
	{
		$url = PackageUrl::deletePackageUrl($packageId, $returnId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>

