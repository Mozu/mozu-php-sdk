<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\OrderUrl;


/**
* Use the Orders resource to manage all components of order processing, payment, and fulfillment.
*/
class OrderClient {

	/**
	* 
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter an order's search results by any of its properties, including status, contact information, or total. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=Status+eq+Submitted"
	* @param bool $includeBin 
	* @param int $pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. Default value: 20. Max value: 200.
	* @param string $q A list of order search terms to use in the query when searching across order number and the name or email of the billing contact. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields 
	* @param string $sortBy The element to sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts 'asc' or 'asc' or descending order (z-a) which accepts 'desc' or 'desc'. The sortBy parameter follows an available property. For examp
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getOrdersClient($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $includeBin =  null, $responseFields =  null)
	{
		$url = OrderUrl::getOrdersUrl($filter, $includeBin, $pageSize, $q, $qLimit, $responseFields, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the available order actions to get.
	* @return MozuClient
	*/
	public static function getAvailableActionsClient($orderId)
	{
		$url = OrderUrl::getAvailableActionsUrl($orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order to retrieve.
	* @return MozuClient
	*/
	public static function getTaxableOrdersClient($orderId)
	{
		$url = OrderUrl::getTaxableOrdersUrl($orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param bool $draft If true, retrieve the draft version of the order, which might include uncommitted changes to the order or its components.
	* @param bool $includeBin 
	* @param string $orderId Unique identifier of the order details to get.
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function getOrderClient($orderId, $draft =  null, $includeBin =  null, $responseFields =  null)
	{
		$url = OrderUrl::getOrderUrl($draft, $includeBin, $orderId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID.
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function createOrderFromCartClient($cartId, $responseFields =  null)
	{
		$url = OrderUrl::createOrderFromCartUrl($cartId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param Order $order Properties of the order to create and submit.
	* @return MozuClient
	*/
	public static function createOrderClient($order, $responseFields =  null)
	{
		$url = OrderUrl::createOrderUrl($responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($order);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields 
	* @param OrderAction $action The action to perform for the order.
	* @return MozuClient
	*/
	public static function performOrderActionClient($action, $orderId, $responseFields =  null)
	{
		$url = OrderUrl::performOrderActionUrl($orderId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($action);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param bool $refreshShipping 
	* @param string $responseFields 
	* @param Order $order 
	* @return MozuClient
	*/
	public static function priceOrderClient($order, $refreshShipping, $responseFields =  null)
	{
		$url = OrderUrl::priceOrderUrl($refreshShipping, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($order);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $digitalWalletType 
	* @param string $orderId 
	* @param string $responseFields 
	* @param DigitalWallet $digitalWallet 
	* @return MozuClient
	*/
	public static function processDigitalWalletClient($digitalWallet, $orderId, $digitalWalletType, $responseFields =  null)
	{
		$url = OrderUrl::processDigitalWalletUrl($digitalWalletType, $orderId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($digitalWallet);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $discountId Unique identifier of the discount. System-supplied and read only.
	* @param string $orderId Unique identifier of the order discount. System-supplied and read only.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to modify the discount by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @param AppliedDiscount $discount Properties of the order discount to update.
	* @return MozuClient
	*/
	public static function updateOrderDiscountClient($discount, $orderId, $discountId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$url = OrderUrl::updateOrderDiscountUrl($discountId, $orderId, $responseFields, $updateMode, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($discount);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order associated with the draft to delete.
	* @param string $version If applicable, the version of the order draft to delete.
	* @return MozuClient
	*/
	public static function deleteOrderDraftClient($orderId, $version =  null)
	{
		$url = OrderUrl::deleteOrderDraftUrl($orderId, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @param OrderAction $action 
	* @return MozuClient
	*/
	public static function resendOrderConfirmationEmailClient($action, $orderId)
	{
		$url = OrderUrl::resendOrderConfirmationEmailUrl($orderId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($action);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId 
	* @param string $responseFields 
	* @param string $updateMode 
	* @param string $version 
	* @param string $priceListCode 
	* @return MozuClient
	*/
	public static function changeOrderPriceListClient($priceListCode, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$url = OrderUrl::changeOrderPriceListUrl($orderId, $responseFields, $updateMode, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($priceListCode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order.
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function changeOrderUserIdClient($orderId, $responseFields =  null)
	{
		$url = OrderUrl::changeOrderUserIdUrl($orderId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $orderId Unique identifier of the order to update.
	* @param string $responseFields 
	* @param string $updateMode Specifies whether to update the original order, update the order in draft mode, or update the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal," "ApplyToDraft," or "ApplyAndCommit."
	* @param string $version 
	* @param Order $order The properties of the order to update.
	* @return MozuClient
	*/
	public static function updateOrderClient($order, $orderId, $updateMode =  null, $version =  null, $responseFields =  null)
	{
		$url = OrderUrl::updateOrderUrl($orderId, $responseFields, $updateMode, $version);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($order);
		return $mozuClient;

	}
	
	
}

?>

