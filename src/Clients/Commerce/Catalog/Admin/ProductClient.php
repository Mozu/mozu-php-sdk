<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\ProductUrl;

use Mozu\Api\Headers;

/**
* Use the Product Administration resource to create new product definitions in the master catalog and determine which catalogs will feature products. You can also assign attribute values for defined products, manage product-level location inventory, and configure the variations of a product.
*/
class ProductClient {

	/**
	* 
	*
	* @param string $filter 
	* @param bool $noCount If true, the operation does not return the TotalCount number of results.
	* @param int $pageSize 
	* @param string $q A list of product search terms to use in the query when searching across product code and product name. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getProductsClient($dataViewMode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $q =  null, $qLimit =  null, $noCount =  null, $responseFields =  null)
	{
		$url = ProductUrl::getProductsUrl($filter, $noCount, $pageSize, $q, $qLimit, $responseFields, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @return MozuClient
	*/
	public static function getProductInCatalogsClient($dataViewMode, $productCode)
	{
		$url = ProductUrl::getProductInCatalogsUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function getProductInCatalogClient($dataViewMode, $productCode, $catalogId, $responseFields =  null)
	{
		$url = ProductUrl::getProductInCatalogUrl($catalogId, $productCode, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function getProductClient($dataViewMode, $productCode, $responseFields =  null)
	{
		$url = ProductUrl::getProductUrl($productCode, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param Product $product Properties of the new product. You must supply values for the product code, product name, and price.
	* @return MozuClient
	*/
	public static function addProductClient($dataViewMode, $product, $responseFields =  null)
	{
		$url = ProductUrl::addProductUrl($responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($product)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param string $responseFields 
	* @param ProductInCatalogInfo $productInCatalogInfoIn Properties of the product to define for the specific catalog association.
	* @return MozuClient
	*/
	public static function addProductInCatalogClient($dataViewMode, $productInCatalogInfoIn, $productCode, $responseFields =  null)
	{
		$url = ProductUrl::addProductInCatalogUrl($productCode, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productInCatalogInfoIn)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param array|ProductCodeRename $productCodeRenames 
	* @return MozuClient
	*/
	public static function renameProductCodesClient($productCodeRenames)
	{
		$url = ProductUrl::renameProductCodesUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productCodeRenames);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param array|ProductInCatalogInfo $productInCatalogsIn Properties of the product to update for each associated catalog.
	* @return MozuClient
	*/
	public static function updateProductInCatalogsClient($dataViewMode, $productInCatalogsIn, $productCode)
	{
		$url = ProductUrl::updateProductInCatalogsUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productInCatalogsIn)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @param string $responseFields 
	* @param ProductInCatalogInfo $productInCatalogInfoIn Properties of the product associated with the catalog specified in the request.
	* @return MozuClient
	*/
	public static function updateProductInCatalogClient($dataViewMode, $productInCatalogInfoIn, $productCode, $catalogId, $responseFields =  null)
	{
		$url = ProductUrl::updateProductInCatalogUrl($catalogId, $productCode, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productInCatalogInfoIn)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @param string $responseFields 
	* @param Product $product Properties of the product definition to update in the master catalog.
	* @return MozuClient
	*/
	public static function updateProductClient($dataViewMode, $product, $productCode, $responseFields =  null)
	{
		$url = ProductUrl::updateProductUrl($productCode, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($product)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $productCode 
	* @return MozuClient
	*/
	public static function deleteProductClient($dataViewMode, $productCode)
	{
		$url = ProductUrl::deleteProductUrl($productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $catalogId 
	* @param string $productCode 
	* @return MozuClient
	*/
	public static function deleteProductInCatalogClient($dataViewMode, $productCode, $catalogId)
	{
		$url = ProductUrl::deleteProductInCatalogUrl($catalogId, $productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	
}

?>

