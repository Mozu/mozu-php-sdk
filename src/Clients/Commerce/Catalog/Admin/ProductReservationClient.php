<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\ProductReservationUrl;

use Mozu\Api\Headers;

/**
* Temporarily hold a product from inventory while a shopper is filling out payment information. Create a product reservation when a shopper proceeds to check out and then release the reservation when the order process is complete.
*/
class ProductReservationClient {

	/**
	* 
	*
	* @param string $filter 
	* @param int $pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. Default value: 20. Max value: 200.
	* @param string $responseFields 
	* @param string $sortBy The element to sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts 'asc' or 'asc' or descending order (z-a) which accepts 'desc' or 'desc'. The sortBy parameter follows an available property.
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getProductReservationsClient($dataViewMode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$url = ProductReservationUrl::getProductReservationsUrl($filter, $pageSize, $responseFields, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $productReservationId Unique identifier of the product reservation.
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function getProductReservationClient($dataViewMode, $productReservationId, $responseFields =  null)
	{
		$url = ProductReservationUrl::getProductReservationUrl($productReservationId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param bool $skipInventoryCheck If true, skip the process to validate inventory when creating this product reservation.
	* @param array|ProductReservation $productReservations Details of the product reservations to add.
	* @return MozuClient
	*/
	public static function addProductReservationsClient($dataViewMode, $productReservations, $skipInventoryCheck =  null)
	{
		$url = ProductReservationUrl::addProductReservationsUrl($skipInventoryCheck);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productReservations)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param array|ProductReservation $productReservations List of unique identifiers of the reservations to commit.
	* @return MozuClient
	*/
	public static function commitReservationsClient($dataViewMode, $productReservations)
	{
		$url = ProductReservationUrl::commitReservationsUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productReservations)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param bool $skipInventoryCheck If true, skip the inventory validation process when updating this product reservation.
	* @param array|ProductReservation $productReservations Properties of the product reservations to update.
	* @return MozuClient
	*/
	public static function updateProductReservationsClient($dataViewMode, $productReservations, $skipInventoryCheck =  null)
	{
		$url = ProductReservationUrl::updateProductReservationsUrl($skipInventoryCheck);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productReservations)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $productReservationId Unique identifier of the reservation.
	* @return MozuClient
	*/
	public static function deleteProductReservationClient($dataViewMode, $productReservationId)
	{
		$url = ProductReservationUrl::deleteProductReservationUrl($productReservationId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	
}

?>

