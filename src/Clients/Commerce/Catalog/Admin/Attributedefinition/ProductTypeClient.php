<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin\Attributedefinition;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\Attributedefinition\ProductTypeUrl;

use Mozu\Api\Headers;

/**
* Use the Product Types resource to manage the types for your product catalog. Product types act as configuration templates, which store a set of attributes common to all products associated with that type. Unlike categories, products can only be associated with a single product type.
*/
class ProductTypeClient {

	/**
	* 
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter product type search results by any of its properties. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=Name+cont+shoes"
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getProductTypesClient($dataViewMode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$url = ProductTypeUrl::getProductTypesUrl($filter, $pageSize, $responseFields, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $productTypeId Identifier of the product type to retrieve.
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function getProductTypeClient($dataViewMode, $productTypeId, $responseFields =  null)
	{
		$url = ProductTypeUrl::getProductTypeUrl($productTypeId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param ProductType $productType Properties of the product type to create.
	* @return MozuClient
	*/
	public static function addProductTypeClient($dataViewMode, $productType, $responseFields =  null)
	{
		$url = ProductTypeUrl::addProductTypeUrl($responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productType)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $productTypeId Identifier of the product type to update.
	* @param string $responseFields 
	* @param ProductType $productType The details of the product type to update.
	* @return MozuClient
	*/
	public static function updateProductTypeClient($dataViewMode, $productType, $productTypeId, $responseFields =  null)
	{
		$url = ProductTypeUrl::updateProductTypeUrl($productTypeId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($productType)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $productTypeId Identifier of the product type to delete.
	* @return MozuClient
	*/
	public static function deleteProductTypeClient($dataViewMode, $productTypeId)
	{
		$url = ProductTypeUrl::deleteProductTypeUrl($productTypeId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	
}

?>

