<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Catalog\Admin;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Catalog\Admin\LocationInventoryUrl;

use Mozu\Api\Headers;

/**
* Use the Location Inventory resource to manage the level of active product inventory maintained at each defined location, at the location level.
*/
class LocationInventoryClient {

	/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param string $productCode 
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function getLocationInventoryClient($dataViewMode, $locationCode, $productCode, $responseFields =  null)
	{
		$url = LocationInventoryUrl::getLocationInventoryUrl($locationCode, $productCode, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $filter 
	* @param string $filterFunctions 
	* @param string $locationCode 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getLocationInventoriesClient($dataViewMode, $locationCode, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $filterFunctions =  null, $responseFields =  null)
	{
		$url = LocationInventoryUrl::getLocationInventoriesUrl($filter, $filterFunctions, $locationCode, $pageSize, $responseFields, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param bool $performUpserts 
	* @param array|LocationInventory $locationInventoryList Array list of product inventory definitions for all associated locations. For each location inventory in the list, define the productCode and stockOnHand values.
	* @return MozuClient
	*/
	public static function addLocationInventoryClient($dataViewMode, $locationInventoryList, $locationCode, $performUpserts =  null)
	{
		$url = LocationInventoryUrl::addLocationInventoryUrl($locationCode, $performUpserts);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($locationInventoryList)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param array|LocationInventoryAdjustment $locationInventoryAdjustments Properties of the inventory adjustments to perform for the specified location.
	* @return MozuClient
	*/
	public static function updateLocationInventoryClient($dataViewMode, $locationInventoryAdjustments, $locationCode)
	{
		$url = LocationInventoryUrl::updateLocationInventoryUrl($locationCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($locationInventoryAdjustments)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $locationCode User-defined code that uniquely identifies the location.
	* @param string $productCode 
	* @return MozuClient
	*/
	public static function deleteLocationInventoryClient($dataViewMode, $locationCode, $productCode)
	{
		$url = LocationInventoryUrl::deleteLocationInventoryUrl($locationCode, $productCode);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withHeader(Headers::X_VOL_DATAVIEW_MODE ,$dataViewMode);
		return $mozuClient;

	}
	
	
}

?>

