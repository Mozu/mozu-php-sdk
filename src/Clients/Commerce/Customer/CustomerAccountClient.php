<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Customer;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Customer\CustomerAccountUrl;


/**
* Use the Customer Accounts resource to manage the components of shopper accounts, including attributes, contact information, company notes, and groups associated with the customer account.
*/
class CustomerAccountClient {

	/**
	* 
	*
	* @param string $fields The fields to include in the response.
	* @param string $filter 
	* @param bool $isAnonymous If true, retrieve anonymous shopper accounts in the response.
	* @param int $pageSize 
	* @param string $q A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getAccountsClient($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $fields =  null, $q =  null, $qLimit =  null, $isAnonymous =  null, $responseFields =  null)
	{
		$url = CustomerAccountUrl::getAccountsUrl($fields, $filter, $isAnonymous, $pageSize, $q, $qLimit, $responseFields, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param string $userId 
	* @return MozuClient
	*/
	public static function getLoginStateClient($accountId, $userId =  null, $responseFields =  null)
	{
		$url = CustomerAccountUrl::getLoginStateUrl($accountId, $responseFields, $userId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account to retrieve.
	* @param string $responseFields 
	* @param string $userId 
	* @return MozuClient
	*/
	public static function getAccountClient($accountId, $userId =  null, $responseFields =  null)
	{
		$url = CustomerAccountUrl::getAccountUrl($accountId, $responseFields, $userId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return MozuClient
	*/
	public static function addAccountClient($account, $responseFields =  null)
	{
		$url = CustomerAccountUrl::addAccountUrl($responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($account);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId The customer account information required to change the userpassword.
	* @param bool $unlockAccount 
	* @param string $userId 
	* @param PasswordInfo $passwordInfo The password information required to change the user password.
	* @return MozuClient
	*/
	public static function changePasswordClient($passwordInfo, $accountId, $unlockAccount =  null, $userId =  null)
	{
		$url = CustomerAccountUrl::changePasswordUrl($accountId, $unlockAccount, $userId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($passwordInfo);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param CustomerLoginInfo $customerAuthInfo The authentication information for the customer account.
	* @return MozuClient
	*/
	public static function addLoginToExistingCustomerClient($customerAuthInfo, $accountId, $responseFields =  null)
	{
		$url = CustomerAccountUrl::addLoginToExistingCustomerUrl($accountId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($customerAuthInfo);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId The unique identifier of the customer account for which to calculate customer lifetime value.
	* @return MozuClient
	*/
	public static function recomputeCustomerLifetimeValueClient($accountId)
	{
		$url = CustomerAccountUrl::recomputeCustomerLifetimeValueUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId The unique identifier of the customer account.
	* @param string $userId 
	* @param bool $isLocked If true, the customer account is locked from logging in.
	* @return MozuClient
	*/
	public static function setLoginLockedClient($isLocked, $accountId, $userId =  null)
	{
		$url = CustomerAccountUrl::setLoginLockedUrl($accountId, $userId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($isLocked);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $userId 
	* @param bool $isPasswordChangeRequired If true, the password for the customer account must be changed.
	* @return MozuClient
	*/
	public static function setPasswordChangeRequiredClient($isPasswordChangeRequired, $accountId, $userId =  null)
	{
		$url = CustomerAccountUrl::setPasswordChangeRequiredUrl($accountId, $userId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($isPasswordChangeRequired);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param CustomerAccountAndAuthInfo $accountAndAuthInfo Properties of the customer account to create, including the user authentication information.
	* @return MozuClient
	*/
	public static function addAccountAndLoginClient($accountAndAuthInfo, $responseFields =  null)
	{
		$url = CustomerAccountUrl::addAccountAndLoginUrl($responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($accountAndAuthInfo);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param array|CustomerAccountAndAuthInfo $customers Properties of the customer accounts to create.
	* @return MozuClient
	*/
	public static function addAccountsClient($customers, $responseFields =  null)
	{
		$url = CustomerAccountUrl::addAccountsUrl($responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($customers);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $responseFields 
	* @param AccountPasswordInfoCollection $accountPasswordInfos 
	* @return MozuClient
	*/
	public static function changePasswordsClient($accountPasswordInfos, $responseFields =  null)
	{
		$url = CustomerAccountUrl::changePasswordsUrl($responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($accountPasswordInfos);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $customerSetCode 
	* @param string $emailAddress The email address associated with the customer account.
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function getLoginStateByEmailAddressClient($emailAddress, $customerSetCode =  null, $responseFields =  null)
	{
		$url = CustomerAccountUrl::getLoginStateByEmailAddressUrl($customerSetCode, $emailAddress, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $customerSetCode 
	* @param string $responseFields 
	* @param string $userName The user name associated with the customer account.
	* @return MozuClient
	*/
	public static function getLoginStateByUserNameClient($userName, $customerSetCode =  null, $responseFields =  null)
	{
		$url = CustomerAccountUrl::getLoginStateByUserNameUrl($customerSetCode, $responseFields, $userName);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param string $accountType 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getCustomersPurchaseOrderAccountsClient($startIndex =  null, $pageSize =  null, $sortBy =  null, $accountType =  null, $responseFields =  null)
	{
		$url = CustomerAccountUrl::getCustomersPurchaseOrderAccountsUrl($accountType, $pageSize, $responseFields, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param ResetPasswordInfo $resetPasswordInfo Information required to reset the password for a customer account.
	* @return MozuClient
	*/
	public static function resetPasswordClient($resetPasswordInfo)
	{
		$url = CustomerAccountUrl::resetPasswordUrl();
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($resetPasswordInfo);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields 
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return MozuClient
	*/
	public static function updateAccountClient($account, $accountId, $responseFields =  null)
	{
		$url = CustomerAccountUrl::updateAccountUrl($accountId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($account);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account to delete.
	* @return MozuClient
	*/
	public static function deleteAccountClient($accountId)
	{
		$url = CustomerAccountUrl::deleteAccountUrl($accountId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>

