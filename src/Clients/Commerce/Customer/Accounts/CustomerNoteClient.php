<?php


/**
* <auto-generated>
*     This code was generated by Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Clients\Commerce\Customer\Accounts;

use Mozu\Api\MozuClient;
use Mozu\Api\Urls\Commerce\Customer\Accounts\CustomerNoteUrl;


/**
* Tenant administrators can add and view internal notes for a customer account. For example, a client can track a shopper's interests or complaints. Only clients can add and view notes. Shoppers cannot view these notes from the My Account page.
*/
class CustomerNoteClient {

	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account that contains the note being retrieved.
	* @param int $noteId Unique identifier of a particular note to retrieve.
	* @param string $responseFields 
	* @return MozuClient
	*/
	public static function getAccountNoteClient($accountId, $noteId, $responseFields =  null)
	{
		$url = CustomerNoteUrl::getAccountNoteUrl($accountId, $noteId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $filter 
	* @param int $pageSize 
	* @param string $responseFields 
	* @param string $sortBy 
	* @param int $startIndex 
	* @return MozuClient
	*/
	public static function getAccountNotesClient($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$url = CustomerNoteUrl::getAccountNotesUrl($accountId, $filter, $pageSize, $responseFields, $sortBy, $startIndex);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account for which to create the note.
	* @param string $responseFields 
	* @param CustomerNote $note Properties of the customer account note to create.
	* @return MozuClient
	*/
	public static function addAccountNoteClient($note, $accountId, $responseFields =  null)
	{
		$url = CustomerNoteUrl::addAccountNoteUrl($accountId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($note);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account note to modify.
	* @param int $noteId Unique identifier of the note to update.
	* @param string $responseFields 
	* @param CustomerNote $note The new content to replace the existing note.
	* @return MozuClient
	*/
	public static function updateAccountNoteClient($note, $accountId, $noteId, $responseFields =  null)
	{
		$url = CustomerNoteUrl::updateAccountNoteUrl($accountId, $noteId, $responseFields);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url)->withBody($note);
		return $mozuClient;

	}
	
	/**
	* 
	*
	* @param int $accountId Unique identifier of the customer account that contains the note being deleted.
	* @param int $noteId Unique identifier of the customer account note being deleted.
	* @return MozuClient
	*/
	public static function deleteAccountNoteClient($accountId, $noteId)
	{
		$url = CustomerNoteUrl::deleteAccountNoteUrl($accountId, $noteId);
		$mozuClient = new MozuClient();
		$mozuClient->withResourceUrl($url);
		return $mozuClient;

	}
	
	
}

?>

