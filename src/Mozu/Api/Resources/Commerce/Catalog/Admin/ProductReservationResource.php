<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Catalog\Admin;

use Mozu\Api\Clients\Commerce\Catalog\Admin\ProductReservationClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Contracts\ProductAdmin\ProductReservation;
use Mozu\Api\Contracts\ProductAdmin\ProductReservationCollection;

/**
* Temporarily hold a product from inventory while a shopper is filling out payment information. Create a product reservation when a shopper proceeds to check out and then release the reservation when the order process is complete.
*/
class ProductReservationResource {

	private $apiContext;
	private $dataViewMode;
	public function __construct(ApiContext $apiContext, $dataViewMode) 
	{
		$this->apiContext = $apiContext;
		$this->dataViewMode = $dataViewMode;
	}

	

	/**
	* Retrieves a list of product reservations according to any specified filter criteria and sort options.
	*
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return ProductReservationCollection 
	*/
	public function getProductReservations($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = ProductReservationClient::getProductReservationsClient($this->dataViewMode, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Retrieves the details of a product reservation.
	*
	* @param int $productReservationId Unique identifier of the product reservation.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return ProductReservation 
	*/
	public function getProductReservation($productReservationId, $responseFields =  null)
	{
		$mozuClient = ProductReservationClient::getProductReservationClient($this->dataViewMode, $productReservationId, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Creates a new product reservation for a product. This action places a hold on the product inventory for the quantity specified during the ordering process.
	*
	* @param bool $skipInventoryCheck If true, skip the process to validate inventory when creating this product reservation.
	* @param array|ProductReservation $productReservations Details of the product reservations to add.
	* @return array|ProductReservation 
	*/
	public function addProductReservations($productReservations, $skipInventoryCheck =  null)
	{
		$mozuClient = ProductReservationClient::addProductReservationsClient($this->dataViewMode, $productReservations, $skipInventoryCheck);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Commits a product reservation to decrement the product's inventory by the quantity specified then release the reservation once the order process completed successfully.
	*
	* @param array|ProductReservation $productReservations List of unique identifiers of the reservations to commit.
	* @return void
	*/
	public function commitReservations($productReservations)
	{
		$mozuClient = ProductReservationClient::commitReservationsClient($this->dataViewMode, $productReservations);
		$mozuClient->withContext($this->apiContext)
				->execute();

	}
	
	/**
	* Updates an existing product reservation for a product.
	*
	* @param bool $skipInventoryCheck If true, skip the inventory validation process when updating this product reservation.
	* @param array|ProductReservation $productReservations Properties of the product reservations to update.
	* @return array|ProductReservation 
	*/
	public function updateProductReservations($productReservations, $skipInventoryCheck =  null)
	{
		$mozuClient = ProductReservationClient::updateProductReservationsClient($this->dataViewMode, $productReservations, $skipInventoryCheck);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Deletes a product reservation. For example, delete a reservation when an order is not processed to return the product quantity back to inventory.
	*
	* @param int $productReservationId Unique identifier of the reservation.
	* @return void
	*/
	public function deleteProductReservation($productReservationId)
	{
		$mozuClient = ProductReservationClient::deleteProductReservationClient($this->dataViewMode, $productReservationId);
		$mozuClient->withContext($this->apiContext)
				->execute();

	}
	
	
}

?>

