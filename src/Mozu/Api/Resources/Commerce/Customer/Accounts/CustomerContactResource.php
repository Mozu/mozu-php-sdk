<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer\Accounts;

use Mozu\Api\Clients\Commerce\Customer\Accounts\CustomerContactClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Contracts\Customer\CustomerContact;
use Mozu\Api\Contracts\Customer\CustomerContactCollection;

/**
* Merchants and customers can create, view, update, and delete a contact for a customer account. A customer account may have multiple contacts for billing and shipping addresses.
*/
class CustomerContactResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	

	/**
	* Retrieves the specified contact for a customer account such as a billing or shipping contact.
	*
	* @param int $accountId Unique identifier of the customer account whose contact information is being retrieved.
	* @param int $contactId Unique identifier of the customer account contact to retrieve.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return CustomerContact 
	*/
	public function getAccountContact($accountId, $contactId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactClient($accountId, $contactId, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
	*
	* @param int $accountId Unique identifier of the customer account associated with the contact information to retrieve.
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param int $pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CustomerContactCollection 
	*/
	public function getAccountContacts($accountId, $startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::getAccountContactsClient($accountId, $startIndex, $pageSize, $sortBy, $filter, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Creates a new contact for a customer account such as a new shipping address.
	*
	* @param int $accountId Unique identifier of the customer account containing the new contact.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param CustomerContact $contact Properties of the new contact. Required properties: Contact.Email, ContactType.
	* @return CustomerContact 
	*/
	public function addAccountContact($contact, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::addAccountContactClient($contact, $accountId, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Updates a contact for a specified customer account such as to update addresses or change which contact is the primary contact for billing.
	*
	* @param int $accountId Unique identifier of the customer account whose contact information is being updated.
	* @param int $contactId Unique identifer of the customer account contact being updated.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param CustomerContact $contact All properties the updated contact will have. Required properties: Name and email address.
	* @return CustomerContact 
	*/
	public function updateAccountContact($contact, $accountId, $contactId, $responseFields =  null)
	{
		$mozuClient = CustomerContactClient::updateAccountContactClient($contact, $accountId, $contactId, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Deletes a contact for the specified customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param int $contactId Unique identifier of the customer account contact to delete.
	* @return void
	*/
	public function deleteAccountContact($accountId, $contactId)
	{
		$mozuClient = CustomerContactClient::deleteAccountContactClient($accountId, $contactId);
		$mozuClient->withContext($this->apiContext)
				->execute();

	}
	
	
}

?>

