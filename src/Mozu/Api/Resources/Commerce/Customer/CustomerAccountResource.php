<?php


/**
* <auto-generated>
*     This code was generated by a Codezu.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
* </auto-generated>
*/

namespace Mozu\Api\Resources\Commerce\Customer;

use Mozu\Api\Clients\Commerce\Customer\CustomerAccountClient;
use Mozu\Api\ApiContext;

use Mozu\Api\Contracts\Customer\CustomerAccountAndAuthInfo;
use Mozu\Api\Contracts\Customer\CustomerAccount;
use Mozu\Api\Contracts\Customer\PasswordInfo;
use Mozu\Api\Contracts\Customer\CustomerLoginInfo;
use Mozu\Api\Contracts\Customer\ResetPasswordInfo;
use Mozu\Api\Contracts\Customer\CustomerAccountCollection;
use Mozu\Api\Contracts\Customer\LoginState;
use Mozu\Api\Contracts\Customer\CustomerAuthTicket;

/**
* Use the Customer Accounts resource to manage the components of shopper accounts, including attributes, contact information, company notes, and groups associated with the customer account.
*/
class CustomerAccountResource {

	private $apiContext;
	public function __construct(ApiContext $apiContext) 
	{
		$this->apiContext = $apiContext;
	}

	

	/**
	* Retrieves a list of customer accounts.
	*
	* @param string $fields The fields to include in the response.
	* @param string $filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param bool $isAnonymous If true, retrieve anonymous shopper accounts in the response.
	* @param int $pageSize 
	* @param string $q A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.
	* @param int $qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param string $sortBy 
	* @param int $startIndex 
	* @return CustomerAccountCollection 
	*/
	public function getAccounts($startIndex =  null, $pageSize =  null, $sortBy =  null, $filter =  null, $fields =  null, $q =  null, $qLimit =  null, $isAnonymous =  null, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getAccountsClient($startIndex, $pageSize, $sortBy, $filter, $fields, $q, $qLimit, $isAnonymous, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Retrieves the current login state of the customer account specified in the request.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return LoginState 
	*/
	public function getLoginState($accountId, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateClient($accountId, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Retrieve details of a customer account.
	*
	* @param int $accountId Unique identifier of the customer account to retrieve.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return CustomerAccount 
	*/
	public function getAccount($accountId, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getAccountClient($accountId, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Creates a new customer account based on the information specified in the request.
	*
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return CustomerAccount 
	*/
	public function addAccount($account, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addAccountClient($account, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Modify the password associated with a customer account.
	*
	* @param int $accountId The customer account information required to change the userpassword.
	* @param PasswordInfo $passwordInfo The password information required to change the user password.
	* @return void
	*/
	public function changePassword($passwordInfo, $accountId)
	{
		$mozuClient = CustomerAccountClient::changePasswordClient($passwordInfo, $accountId);
		$mozuClient->withContext($this->apiContext)
				->execute();

	}
	
	/**
	* Adds a new user login to a defined customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param CustomerLoginInfo $customerAuthInfo The authentication information for the customer account.
	* @return CustomerAuthTicket 
	*/
	public function addLoginToExistingCustomer($customerAuthInfo, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addLoginToExistingCustomerClient($customerAuthInfo, $accountId, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Updates the customer lifetime value of the specified customer account in the event of an order import or a lifetime value calculation error.
	*
	* @param int $accountId The unique identifier of the customer account for which to calculate customer lifetime value.
	* @return void
	*/
	public function recomputeCustomerLifetimeValue($accountId)
	{
		$mozuClient = CustomerAccountClient::recomputeCustomerLifetimeValueClient($accountId);
		$mozuClient->withContext($this->apiContext)
				->execute();

	}
	
	/**
	* Lock or unlock a customer account.
	*
	* @param int $accountId The unique identifier of the customer account.
	* @param bool $isLocked If true, the customer account is locked from logging in.
	* @return void
	*/
	public function setLoginLocked($isLocked, $accountId)
	{
		$mozuClient = CustomerAccountClient::setLoginLockedClient($isLocked, $accountId);
		$mozuClient->withContext($this->apiContext)
				->execute();

	}
	
	/**
	* Requires the password for the customer account to be changed.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param bool $isPasswordChangeRequired If true, the password for the customer account must be changed.
	* @return void
	*/
	public function setPasswordChangeRequired($isPasswordChangeRequired, $accountId)
	{
		$mozuClient = CustomerAccountClient::setPasswordChangeRequiredClient($isPasswordChangeRequired, $accountId);
		$mozuClient->withContext($this->apiContext)
				->execute();

	}
	
	/**
	* Creates a new customer account and logs the user associated with the customer account into the site.
	*
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param CustomerAccountAndAuthInfo $accountAndAuthInfo Properties of the customer account to create, including the user authentication information.
	* @return CustomerAuthTicket 
	*/
	public function addAccountAndLogin($accountAndAuthInfo, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addAccountAndLoginClient($accountAndAuthInfo, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Creates multiple customer accounts based on the information specified in the request.
	*
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param array|CustomerAccountAndAuthInfo $customers Properties of the customer accounts to create.
	* @return CustomerAccountCollection 
	*/
	public function addAccounts($customers, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::addAccountsClient($customers, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Retrieves the current login state of a customer account by providing the customer's email address.
	*
	* @param string $emailAddress The email address associated with the customer account.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @return LoginState 
	*/
	public function getLoginStateByEmailAddress($emailAddress, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByEmailAddressClient($emailAddress, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Retrieves the current login state of a customer account by providing the user name associated with the customer account.
	*
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param string $userName The user name associated with the customer account.
	* @return LoginState 
	*/
	public function getLoginStateByUserName($userName, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::getLoginStateByUserNameClient($userName, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Resets the password for a customer account.
	*
	* @param ResetPasswordInfo $resetPasswordInfo Information required to reset the password for a customer account.
	* @return void
	*/
	public function resetPassword($resetPasswordInfo)
	{
		$mozuClient = CustomerAccountClient::resetPasswordClient($resetPasswordInfo);
		$mozuClient->withContext($this->apiContext)
				->execute();

	}
	
	/**
	* Updates a customer account.
	*
	* @param int $accountId Unique identifier of the customer account.
	* @param string $responseFields Use this field to include those fields which are not included by default.
	* @param CustomerAccount $account Properties of the customer account to update.
	* @return CustomerAccount 
	*/
	public function updateAccount($account, $accountId, $responseFields =  null)
	{
		$mozuClient = CustomerAccountClient::updateAccountClient($account, $accountId, $responseFields);
		return $mozuClient->withContext($this->apiContext)
				->execute()
				->getResult();

	}
	
	/**
	* Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
	*
	* @param int $accountId Unique identifier of the customer account to delete.
	* @return void
	*/
	public function deleteAccount($accountId)
	{
		$mozuClient = CustomerAccountClient::deleteAccountClient($accountId);
		$mozuClient->withContext($this->apiContext)
				->execute();

	}
	
	
}

?>

